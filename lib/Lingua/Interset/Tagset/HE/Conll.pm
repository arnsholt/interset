# ABSTRACT: Driver for the Hebrew tagset.
# Copyright © 2014 Dan Zeman <zeman@ufal.mff.cuni.cz>
# Copyright © 2013 Rudolf Rosa <rosa@ufal.mff.cuni.cz>

package Lingua::Interset::Tagset::HE::Conll;
use strict;
use warnings;
# VERSION: generated by DZP::OurPkgVersion

use utf8;
use open ':utf8';
use namespace::autoclean;
use Moose;
extends 'Lingua::Interset::Tagset::Conll';



#------------------------------------------------------------------------------
# Returns the tagset id that should be set as the value of the 'tagset' feature
# during decoding. Every derived class must (re)define this method! The result
# should correspond to the last two parts in package name, lowercased.
# Specifically, it should be the ISO 639-2 language code, followed by '::' and
# a language-specific tagset id. Example: 'cs::multext'.
#------------------------------------------------------------------------------
sub get_tagset_id
{
    return 'he::conll';
}



#------------------------------------------------------------------------------
# Creates atomic drivers for surface features.
#------------------------------------------------------------------------------
sub _create_atoms
{
    my $self = shift;
    my %atoms;
    # PART OF SPEECH ####################
    # Yoav Goldberg:
    # The tagging conversion was done in a semi-automated process (a heuristic
    # mapping between the tagsets, which accounts for the tree context, was
    # defined and applied. Some hard cases were left unresolved in the automatic
    # process and marked for manual annotation). Words that lack an analysis in
    # the Morphological Analyzer are assigned the tag !!UNK!!, and words that do
    # not have a correct analysis in the morphological analyzer are assigned the
    # tag !!MISS!!
    $atoms{pos} = $self->create_atom
    (
        'surfeature' => 'pos',
        'decode_map' =>
        {
            # Adverb appearing as prefix
            # כ
            'ADVERB' => ['pos' => 'adv'],
            # AT (direct object) marker
            # תא
            'AT' => ['pos' => 'part'],
            # Beinoni (participle) form
            # רושק, ףסונ, עגונ, רבודמ
            'BN' => ['pos' => 'verb', 'verbform' => 'part'],
            # Beinoni Form with a possessive suffix
            # היבשוי
            'BN_S_PP' => ['pos' => 'verb', 'verbform' => 'part', 'poss' => 'poss'],
            # Construct-state Beinoni Form
            # עבטמ, הברמ, תלזוא, יליחנמ, יכומ
            'BNT' => ['pos' => 'verb', 'verbform' => 'part'],
            # Conjunction
            # ש, דוגינב, לככ, יפכ
            'CC' => ['pos' => 'conj'],
            # Coordinating Conjunction other than ו
            # םג, םא, וא, לבא, קר
            'CC-COORD' => ['pos' => 'conj', 'conjtype' => 'coor'],
            # Relativizing Conjunction
            # רשא
            'CC-REL' => ['pos' => 'conj'],
            # Subordinating Conjunction
            # יכ, ידכ, רחאל, רשאכ, ומכ
            'CC-SUB' => ['pos' => 'conj', 'conjtype' => 'sub'],
            # Number
            # תחא, 1, 0
            'CD' => ['pos' => 'num'],
            # Construct Numeral
            # ינש, יתש, יפלא, תואמ, תורשע
            'CDT' => ['pos' => 'num'],
            # The ו coordinating word
            # ו
            'CONJ' => ['pos' => 'conj', 'conjtype' => 'coor'],
            # Copula (present) and Auxiliaries (past and future)
            # היה, ויה, התיה, וניא, היהי
            'COP' => ['pos' => 'verb', 'verbtype' => 'cop'],
            #89 COP-TOINFINITIVE
            'COP-TOINFINITIVE' => ['pos' => 'verb', 'verbtype' => 'cop'],
            # H marker (the definite article prefix)
            # ה
            'DEF' => ['pos' => 'adj', 'prontype' => 'art', 'definiteness' => 'def'],
            #53 DEF@DT
            'DEF@DT' => ['pos' => 'adj', 'prontype' => 'art', 'definiteness' => 'def'],
            # Determiner
            # יהשוזיא, רחבמ, לכ
            'DT' => ['pos' => 'adj', 'prontype' => 'prn'],
            # Construct-state Determiner
            # המכ, ותוא, םוש, הברה
            'DTT' => ['pos' => 'adj', 'prontype' => 'prn'],
            # Existential
            # שי, ןיא, םנשי, היה
            'EX' => ['pos' => 'adv', 'advtype' => 'ex'],
            # Preposition
            # לע, ל, םע, ןיב
            'IN' => ['pos' => 'adp', 'adpostype' => 'prep'],
            # Interjection
            # סופ, ףוא, הלילח, אנ, יוא
            'INTJ' => ['pos' => 'int'],
            # Adjective
            # םירחא, םיבר, שדח, לודג, ימואל
            'JJ' => ['pos' => 'adj'],
            # Construct-state Adjective
            # רבודמ, יעדומ, ילוער, תרסח, יבורמ
            'JJT' => ['pos' => 'adj'],
            # Modal
            # רשפא, לוכי, ךירצ, הלוכי, לולע
            'MD' => ['pos' => 'verb', 'verbtype' => 'mod'],
            # Numerical Expression
            # 03.02, 00.02, 11.61, 28.6.6, 11.31
            'NCD' => ['pos' => 'num'],
            # Noun
            # הרטשמ, הלשממ, םוי, ץרא
            'NN' => ['pos' => 'noun', 'nountype' => 'com'],
            # Proper Nouns
            # לארשי, םילשורי, אנהכ, ביבא
            'NNP' => ['pos' => 'noun', 'nountype' => 'prop'],
            # Noun with a possessive suffix
            # ותומ, וירבד, וייח, ופוס, ומש
            'NN_S_PP' => ['pos' => 'noun', 'poss' => 'poss'],
            # Construct-state nouns
            # ידי, תעדוו
            'NNT' => ['pos' => 'noun'],
            # “Prefix” wordlets
            # יתלב, יא, ןיב, תת, יטנא
            'P' => ['pos' => 'part'],
            # Possessive
            # לש
            'POS' => ['pos' => 'part', 'poss' => 'poss'],
            # Prefix-Prepositions
            # ב, ל, מ, כ, שכ
            'PREPOSITION' => ['pos' => 'adp', 'adpostype' => 'prep'],
            # Pronouns TODO prontype?
            # אוה, הז, איה, םה, וז
            'PRP' => ['pos' => 'noun', 'prontype' => 'prs'],
            #222 PRP-DEM
            'PRP-DEM' => ['pos' => 'adj', 'prontype' => 'dem'],
            #2 PRP-IMP
            # כְּלוּם kəlum = anything PRP PRP-IMP _
            # Used with a negative word, so the combination means "nothing".
            'PRP-IMP' => ['pos' => 'noun', 'prontype' => 'neg'],
            # Punctuation
            # ,, ., ־
            'PUNC' => ['pos' => 'punc'],
            # QuestionWord
            # המ, ימ, םאה, מ, ןכיה
            'QW' => ['pos' => 'adj', 'prontype' => 'int'],
            # Adverbs
            # אל, רתוי, דוע, רבכ, לומתא
            'RB' => ['pos' => 'adv'],
            # Relativizer
            # ש
            'REL-SUBCONJ' => ['pos' => 'adj', 'prontype' => 'rel'],
            # Nominative suffix
            # suffמה, suffאוה, suffאיה
            'S_ANP' => ['pos' => 'part', 'case' => 'nom'],
            # Pronomial suffix TODO prontype?
            # suffאוה, suffמה, suffאיה
            'S_PRN' => ['pos' => 'part', 'prontype' => 'prs'],
            # Temporal Suboordinating Conjunction
            # שכ, שמ
            'TEMP-SUBCONJ' => ['pos' => 'conj', 'conjtype' => 'sub'],
            # Titles
            # ר״ד, ד״וע, בצינ, רוספורפ, רמ
            'TTL' => ['pos' => 'noun'],
            # Verbs
            # רמא, רמוא, הארנ, עדוי
            'VB' => ['pos' => 'verb'],
            #1 VB-BAREINFINITIVE
            'VB-BAREINFINITIVE' => ['pos' => 'verb', 'verbform' => 'inf'],
            # Infinitive Verbs
            # תושעל, םלשל, עונמל, תתל, עצבל
            'VB-TOINFINITIVE' => ['pos' => 'verb', 'verbform' => 'inf'],
            #550 !!MISS!!
            # words that do not have a correct analysis in the morphological analyzer
            '!!MISS!!' => [],
            #6 !!SOME_!!
            '!!SOME_!!' => [],
            #520 !!UNK!!
            # Words that lack an analysis in the Morphological Analyzer
            '!!UNK!!' => [],
            #134 !!ZVL!!
            '!!ZVL!!' => []
        },
        'encode_map' =>
        {
            'pos' => { 'noun' => { 'prontype' => { ''  => { 'poss' => { 'poss' => 'NN_S_PP',
                                                                        '@'    => { 'nountype' => { 'prop' => 'NNP',
                                                                                                    '@'    => 'NN' }}}}, ###!!! NNT construct state; TTL
                                                   '@' => 'PRP' }}, ###!!! PRP-IMP
                       'adj'  => { 'prontype' => { 'art' => 'DEF', ###!!! DEF@DT
                                                   'dem' => 'PRP-DEM',
                                                   'int' => 'QW',
                                                   'rel' => 'REL-SUBCONJ',
                                                   ''    => 'JJ', ###!!! JJT construct state
                                                   '@'   => 'DT' }}, ###!!! DTT construct state
                       'num'  => 'CD', ###!!! CDT construct state; NCD
                       'verb' => { 'verbtype' => { 'cop' => 'COP', ###!!! COP-TOINFINITIVE
                                                   'mod' => 'MD',
                                                   '@'   => { 'verbform' => { 'part' => { 'poss' => { 'poss' => 'BN_S_PP',
                                                                                                      '@'    => 'BN' }}, ###!!! BNT construct state
                                                                              'inf'  => 'VB-BAREINFINITIVE', ###!!! VB-TOINFINITIVE
                                                                              '@'    => 'VB' }}}},
                       'adv'  => { 'advtype' => { 'ex' => 'EX',
                                                  '@'  => 'ADVERB' }}, ###!!! or RB
                       'conj' => { 'conjtype' => { 'coor' => 'CC-COORD', ###!!! CONJ
                                                   'sub'  => 'CC-SUB', ###!!! TEMP-SUBCONJ
                                                   '@'    => 'CC' }}, ###!!! CC-REL
                       'adp'  => 'IN', ###!!! PREPOSITION
                       'part' => { 'poss' => { 'poss' => 'POS',
                                               '@'    => { 'case' => { 'nom' => 'S-ANP',
                                                                       '@'   => { 'prontype' => { 'prs' => 'S-PRN',
                                                                                                  '@'   => 'AT' }}}}}}, ###!!! P
                       'int'  => 'INTJ',
                       'punc' => 'PUNC',
                       '@'    => '!!MISS!!' } ###!!! !!SOME_!!, !!UNK!!, !!ZVL!!
        }
    );
    # PRONOUN TYPE ####################
    # Personal pronouns (PRP PRP PERS):
    # אֲנִי aní = já
    # אֲנַחְנוּ anáxnu = my (hovorově)
    # אָנוּ ánu = my (spisovně)
    # אַתָּה atá = ty (mužský rod)
    # אַתְּ át = ty (ženský rod)
    # אֲתֶּם atém = vy (mužský rod)
    # אַתֶּן atén = vy (ženský rod)
    # הוּא hu = on
    # הִיא hi = ona
    # הֵם hem = oni
    # הֵן hen = ony
    # Demonstrative pronouns (PRP PRP DEM):
    # זֶה ze = tento
    # זוֹ zó = tato
    # Interrogative pronouns:
    # מָה má = co, který, která
    # מִי mí = kdo
    # The undocumented "IMP" feature seems to mean "indefinite, negative or total pronoun".
    # כולם \ כֻּלָּם kulám = all PRP PRP M|P|3|IMP
    # כלשהו klšhú (כָּלְשֶׁהוּ) káləšhú = some PRP PRP M|S|3|IMP
    # כלשהי klšhí (כָּלְשֶׁהִי) káləšhí = some PRP PRP F|S|IMP
    # כלשהם klšhm (כָּלְשֶׁהֵם) káləšhem = any PRP PRP M|P|IMP
    # כלשהן klšhn (כָּלְשֶׁהֵן) káləšhen = any PRP PRP F|P|IMP
    # כְּלוּם kəlum = anything PRP PRP-IMP _
    # Used with a negative word, so the combination means "nothing".
    $atoms{prontype} = $self->create_atom
    (
        'surfeature' => 'prontype',
        'decode_map' =>
        {
            'PERS' => 'prs',
            'DEM'  => 'dem',
            'IMP'  => 'ind|neg|tot'
        },
        'encode_map' =>
        {
            'prontype' => { 'prs' => 'PERS',
                            'dem' => 'DEM',
                            'ind' => 'IMP',
                            'neg' => 'IMP',
                            'tot' => 'IMP' }
        }
    );
    # UNKNOWN WORDS ####################
    $atoms{unknown} = $self->create_atom
    (
        'surfeature' => 'unknown',
        'decode_map' =>
        {
            '!!MISS!!' => ['other' => {'unknown' => 'miss'}],
            '!!UNK!!'  => ['other' => {'unknown' => 'unk'}]
        },
        'encode_map' =>
        {
            'other/unknown' => { 'miss' => '!!MISS!!',
                                 'unk'  => '!!UNK!!' }
        }
    );
    # NUMBER ####################
    $atoms{number} = $self->create_atom
    (
        'surfeature' => 'number',
        'decode_map' =>
        {
            # used usually with nouns. pronouns, numerals, verbs and adjectives
            'S' => ['number' => 'sing'],
            'D' => ['number' => 'dual'],
            'DP'=> ['number' => 'dual|plur'], # pseudo-dual, that is dual used as plural
            'P' => ['number' => 'plur'],
            # used with NN and BN
            'suf_S' => ['number' => 'sing'],
            'suf_P' => ['number' => 'plur']
        }
    );
    # GENDER ####################
    $atoms{gender} = $self->create_atom
    (
        'surfeature' => 'gender',
        'decode_map' =>
        {
            # used usually with nouns. pronouns, numerals, verbs and adjectives
            'M' => ['gender' => 'masc'],
            'F' => ['gender' => 'fem'],
            # used with NN and BN
            'suf_M'  => ['gender' => 'masc'],
            'suf_F'  => ['gender' => 'fem'],
            'suf_MF' => ['gender' => 'masc|fem']
        }
    );
    # PERSON ####################
    # The "A" feature:
    # Used with BN, BNT, MD, VB (i.e. verb forms).
    # For MD and VB, it always coincides with BEINONI.
    # MD and VB BEINONI without A exist but they are very rare.
    # COP BEINONI is always without A.
    # It seems to replace the person feature, meaning person=all. (COP always has person.)
    $atoms{person} = $self->create_atom
    (
        'surfeature' => 'person',
        'decode_map' =>
        {
            # used with VB, COP, MD, BN; NN, PRP, S_PRP, S_ANP
            '1' => ['person' => '1'],
            '2' => ['person' => '2'],
            '3' => ['person' => '3'],
            'A' => [],
            # used with NN and BN
            'suf_1' => ['person' => '1'],
            'suf_2' => ['person' => '2'],
            'suf_3' => ['person' => '3']
        }
    );
    # VERB FORM ####################
    $atoms{verbform} = $self->create_atom
    (
        'surfeature' => 'verbform',
        'decode_map' =>
        {
            # used with COP and VB
            'PAST'       => ['tense' => 'past'],
            'FUTURE'     => ['tense' => 'fut'],
            'IMPERATIVE' => ['mood' => 'imp'],
            'BEINONI'    => ['verbform' => 'part']
        }
    );
    # NEGATIVENESS ####################
    $atoms{negativeness} = $self->create_atom
    (
        'surfeature' => 'negativeness',
        'decode_map' =>
        {
            # used with COP
            'POSITIVE' => ['negativeness' => 'pos'],
            'NEGATIVE' => ['negativeness' => 'neg']
        }
    );
    # BINYANIM ####################
    # used with VB, BN and BNT
    # binyan = building, structure
    # This seems to be a traditional part of Hebrew morphology. See e.g. page 1347 of:
    # http://books.google.cz/books?id=l7UWMZq7FGIC&pg=PA1350&lpg=PA1350&dq=HIFIL+HITPAEL+HUFAL+NIFAL+PAAL+PIEL+PUAL+HIFIL&source=bl&ots=bnVti7b3wi&sig=8O9q5x0DA1DqYiH3g8yVY8r9qgM&hl=cs&sa=X&ei=pf1wVLeADcLOygON7YHoAw&ved=0CCkQ6AEwAQ#v=onepage&q=HIFIL%20HITPAEL%20HUFAL%20NIFAL%20PAAL%20PIEL%20PUAL%20HIFIL&f=false
    # or
    # http://tzion.org/devarim/The%20Seven%20Binyanim.pdf
    $atoms{binyanim} = $self->create_atom
    (
        'surfeature' => 'binyanim',
        'decode_map' =>
        {
            # PAAL      CaCaC      katav = wrote (basic/simple)
            'PAAL'    => ['voice' => 'act'],
            # NIFAL     niCCaC     niktav = was written (basic/simple-passive)
            'NIFAL'   => ['voice' => 'pass'],
            # PIEL      CiCeC      kitev = inscribed/engraved (intensive)
            'PIEL'    => ['voice' => 'int'],
            # PUAL      CuCaC      kutav = was inscribed/engraved (intensive-passive) (theoretical, to illustrate the binyanim; not used with this root)
            'PUAL'    => ['voice' => 'int|pass'],
            # HIFIL     hiCCiC     hiktiv = dictated (causative)
            'HIFIL'   => ['voice' => 'cau'],
            # HUFAL     huCCaC     huktav = was dictated (causative-passive)
            'HUFAL'   => ['voice' => 'cau|pass'],
            # HITPAEL   hitCaCeC   hitkatev = corresponded (reflexive/cooperative aspect ... both active and passive)
            'HITPAEL' => ['voice' => 'mid']
        }
    );
    return \%atoms;
}



#------------------------------------------------------------------------------
# Creates the list of all surface CoNLL features that can appear in the FEATS
# column. This list will be used in decode().
#------------------------------------------------------------------------------
sub _create_features_all
{
    my $self = shift;
    my @features = ('pos', 'per', 'num', 'ten', 'mod', 'voi', 'gen', 'cas', 'deg');
    return \@features;
}



#------------------------------------------------------------------------------
# Creates the list of surface CoNLL features that can appear in the FEATS
# column with particular parts of speech. This list will be used in encode().
#------------------------------------------------------------------------------
sub _create_features_pos
{
    my $self = shift;
    my %features =
    (
    );
    return \%features;
}



#------------------------------------------------------------------------------
# Decodes a physical tag (string) and returns the corresponding feature
# structure.
#------------------------------------------------------------------------------
sub decode
{
    my $self = shift;
    my $tag = shift;
    my $fs = $self->decode_conll($tag);
    # Default feature values. Used to improve collaboration with other drivers.
    # ... nothing yet ...
    return $fs;
}



#------------------------------------------------------------------------------
# Takes feature structure and returns the corresponding physical tag (string).
#------------------------------------------------------------------------------
sub encode
{
    my $self = shift;
    my $fs = shift; # Lingua::Interset::FeatureStructure
    my $atoms = $self->atoms();
    my $pos = $atoms->{pos}->encode($fs);
    my $subpos = $pos;
    my $feature_names = $self->features_all();
    my $tag = $self->encode_conll($fs, $pos, $subpos, $feature_names);
    return $tag;
}



#------------------------------------------------------------------------------
# Returns reference to list of known tags.
# Tags were collected from the corpus.
#------------------------------------------------------------------------------
sub list
{
    my $self = shift;
    my $list = <<end_of_list
end_of_list
    ;
    # Protect from editors that replace tabs by spaces.
    $list =~ s/ \s+/\t/sg;
    my @list = split(/\r?\n/, $list);
    return \@list;
}



1;

=head1 SYNOPSIS

  use Lingua::Interset::Tagset::HE::Conll;
  my $driver = Lingua::Interset::Tagset::HE::Conll->new();
  my $fs = $driver->decode("NN\tNN\tM|S");

or

  use Lingua::Interset qw(decode);
  my $fs = decode('he::conll', "NN\tNN\tM|S");

=head1 DESCRIPTION

Interset driver for the Hebrew tagset in CoNLL format.
CoNLL tagsets in Interset are traditionally three values separated by tabs.
The values come from the CoNLL columns CPOS, POS and FEAT.

Tagset described in Yoav Goldberg: Automatic Syntactic Processing of Modern
Hebrew Automatic Syntactic Processing of Modern Hebrew (2011), p. 32,
L<http://www.cs.bgu.ac.il/~nlpproj/yoav-phd.pdf>

TODO: try to use the official (but not as easy to process) resource:
BGU Computational Linguistics Group. Hebrew morphological tagging guidelines.
Technical report, Ben Gurion University of the Negev, 2008.
L<http://www.cs.bgu.ac.il/~adlerm/tagging-guideline.pdf>

=head1 SEE ALSO

L<Lingua::Interset>,
L<Lingua::Interset::Tagset>,
L<Lingua::Interset::Tagset::Conll>,
L<Lingua::Interset::FeatureStructure>

=cut
