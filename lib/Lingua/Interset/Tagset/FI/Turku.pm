# ABSTRACT: Driver for the Finnish tagset from the Turku Dependency Treebank.
# Tag is a sequence of features separated by vertical bars. There are just the feature values, not attribute-value pairs.
# Copyright © 2011, 2014 Dan Zeman <zeman@ufal.mff.cuni.cz>

package Lingua::Interset::Tagset::FI::Turku;
use strict;
use warnings;
# VERSION: generated by DZP::OurPkgVersion

use utf8;
use open ':utf8';
use namespace::autoclean;
use Moose;
extends 'Lingua::Interset::Tagset';



has 'features_all' => ( isa => 'ArrayRef', is => 'ro', builder => '_create_features_all', lazy => 1 );
has 'atoms' => ( isa => 'HashRef', is => 'ro', builder => '_create_atoms', lazy => 1 );



#------------------------------------------------------------------------------
# Returns the tagset id that should be set as the value of the 'tagset' feature
# during decoding. Every derived class must (re)define this method! The result
# should correspond to the last two parts in package name, lowercased.
# Specifically, it should be the ISO 639-2 language code, followed by '::' and
# a language-specific tagset id. Example: 'cs::multext'.
#------------------------------------------------------------------------------
sub get_tagset_id
{
    return 'fi::turku';
}



#------------------------------------------------------------------------------
# Creates the list of all surface features that can appear in the tag.
#------------------------------------------------------------------------------
sub _create_features_all
{
    my $self = shift;
    my @features = ('pos', 'abbr', 'foreign', 'prop', 'prontype', 'numtype', 'copula', 'advtype', 'conjtype', 'punctype',
                    'degree', 'case', 'number', 'poss', 'mood', 'tense', 'voice', 'person', 'neg', 'inf', 'pcp', 'clitic',
                    'style', 'up', 'trunco', 'unknown');
    return \@features;
}



#------------------------------------------------------------------------------
# Creates atomic drivers for surface features.
#------------------------------------------------------------------------------
sub _create_atoms
{
    my $self = shift;
    my %atoms;
    # PART OF SPEECH ####################
    # Some tags contain two parts of speech, e.g. C|...|V. The rightmost is probably the POS of the stem,
    # while the leftmost one is the resulting POS on the surface. In the list of known tags, I removed the rightmost tag.
    # Some tags do not contain any part of speech, e.g. the DV-MA derivations.
    # http://en.wiktionary.org/wiki/-ma#Finnish hints that the result can be either noun or verb.
    # I added "N" to all "DV-MA" tags in the list of known tags.
    $atoms{pos} = $self->create_atom
    (
        'tagset' => 'fi::turku',
        'surfeature' => 'pos',
        'decode_map' =>
        {
            'A'     => ['pos' => 'adj'],
            # see e.g. http://archives.conlang.info/pei/juenchen/phaelbhaduen.html for what ad-adjective is
            'AD-A'  => ['pos' => 'adv', 'advtype' => 'adadj'],
            'ADV'   => ['pos' => 'adv'],
            'ART'   => ['pos' => 'adj', 'prontype' => 'art'],
            'C'     => ['pos' => 'conj'],
            'INTJ'  => ['pos' => 'int'],
            'N'     => ['pos' => 'noun'],
            'NUM'   => ['pos' => 'num'],
            # adposition (pre- or postposition): jälkeen, ennen
            'PP'    => ['pos' => 'adp'],
            # foreign preposition: de
            'PREP'  => ['pos' => 'adp', 'adpostype' => 'prep'],
            # postposition: vieressä
            'PSP'   => ['pos' => 'adp', 'adpostype' => 'post'],
            # pronoun: sinä
            'PRON'  => ['pos' => 'noun'], # We need non-empty prontype but it should be added by another feature/atom.
            'V'     => ['pos' => 'verb'],
            'PUNCT' => ['pos' => 'punc'],
            # word form not found in lexicon: kiptšakkilais-oguusilaiseksi
            'NON-TWOL' => []
        },
        'encode_map' =>
        {
            'pos' => { 'noun' => { 'prontype' => { ''  => 'N',
                                                   '@' => 'PRON' }},
                       'adj'  => { 'prontype' => { 'art' => 'ART',
                                                   '@'   => 'A' }},
                       'num'  => 'NUM',
                       'verb' => 'V',
                       'adv'  => { 'advtype' => { 'adadj' => 'AD-A',
                                                  '@'     => 'ADV' }},
                       'adp'  => { 'adpostype' => { 'prep' => 'PREP',
                                                    'post' => 'PSP',
                                                    '@'    => 'PP' }},
                       'conj' => 'C',
                       'int'  => 'INTJ',
                       'punc' => 'PUNCT',
                       '@'    => { 'abbr' => { 'abbr' => '', # ABBR will be added by another atom.
                                               '@'    => { 'foreign' => { 'foreign' => '', # FORGN will be added by another atom.
                                                                          # Participles (PCP1) sometimes occur without explicit indication whether they should be considered verbs or adjectives.
                                                                          # Examples: jatkuvalla = continuous (jatkua = continue); käyttävällä = using (käyttää = use)
                                                                          '@'       => { 'verbform' => { 'part' => '',
                                                                                                         '@'    => 'NON-TWOL' }}}}}}}
        }
    );
    # ABBREVIATION ####################
    # abbreviation (eaa., ns., ven.)
    # This feature can appear as the only part of speech of the word, or it can join
    # the part of speech of the original word that has been abbreviated ("ADV|ABBR").
    $atoms{abbr} = $self->create_simple_atom
    (
        'intfeature' => 'abbr',
        'simple_decode_map' =>
        {
            'ABBR' => 'abbr'
        }
    );
    # FOREIGN WORD ####################
    # foreign word (British)
    $atoms{foreign} = $self->create_simple_atom
    (
        'intfeature' => 'foreign',
        'simple_decode_map' =>
        {
            'FORGN' => 'foreign'
        }
    );
    # PROPER NAME ####################
    # proper noun (Mikko)
    $atoms{prop} = $self->create_simple_atom
    (
        'intfeature' => 'nountype',
        'simple_decode_map' =>
        {
            'PROP' => 'prop'
        }
    );
    # PRONOUN TYPE ####################
    # Pronoun types: PERS DEM REL Q REFL/Q
    # Of these, only 'Q' appears in the documentation:
    # Q = quantifier (moni = many, much)
    $atoms{prontype} = $self->create_atom
    (
        'surfeature' => 'prontype',
        'decode_map' =>
        {
            # Q = quantifier (moni = many, much)
            # In the data, it occurs always together with PRON, i.e. 'Q|PRON'. Examples (translation by Google):
            # missään (anywhere), samalla (at the same time), toisen (next), kaikkia (all), jokaista (every), ainoa (only), samaan (same), molemmat (both)
            # Quantifier can also occur with one of the possessive suffixes.
            # It happens solely with the lemma "toinen" = "other" and the result translates as "each other" (lit. "my other", "your other", ...)
            'Q' => ['prontype' => 'ind'],
            # REFL/Q = reflexive quantifying pronoun (itseään = sám = self)
            'REFL/Q' => ['prontype' => 'ind', 'reflex' => 'reflex'],
            # PERS = personal pronoun (meidät = us)
            # minä = I, sinä = you, hän = he/she, me = we, te = you, he = they
            'PERS' => ['prontype' => 'prs'],
            # DEM = demonstrative pronoun (se = that, tuolla = there)
            'DEM' => ['prontype' => 'dem'],
            # REL = relative pronoun (mihin = where, mitä = what, joka = which)
            'REL' => ['prontype' => 'rel'],
            # There are two different features in the tagset that both say that a word is interrogative: INTG and INTERR.
            # INTG: only five tags observed, all PRON: lemmas "mikä" (what), "kuka" (who), "ken" (who). Other forms have REL instead of INTG.
            # INTERR: twelve tags observed with adjectives ("millainen" = "what") and adverbs ("miten" = "how").
            # interrogative pronoun (kuka = who, mikä = what)
            'INTG' => ['prontype' => 'int'],
            # interrogative adverb or adjective (kuinka = how, millainen = which, milloin = when, miksei = why not)
            # The word "miksei" (why not) is tagged at the same time as adverb and verb!
            # I am removing its tag from the list (otherwise it will be considered verb because V occurs later).
            'INTERR' => ['prontype' => 'int']
        },
        'encode_map' =>
        {
            'prontype' => { 'prs' => 'PERS',
                            'dem' => 'DEM',
                            'ind' => { 'reflex' => { 'reflex' => 'REFL/Q',
                                                     '@'      => 'Q' }},
                            'int' => { 'pos' => { 'adv' => 'INTERR',
                                                  'adj' => 'INTERR',
                                                  '@'   => 'INTG' }},
                            'rel' => 'REL' }
        }
    );
    # NUMERAL TYPE ####################
    # We can combine numeral type and form in one atom because they do not occur together.
    $atoms{numtype} = $self->create_atom
    (
        'surfeature' => 'numtype',
        'decode_map' =>
        {
            # ordinal numeral (ensimmäinen = first, toinen = second, kolmas = third)
            'ORD' => ['numtype' => 'ord'],
            # number expressed using Arabic digits
            # it also occurs with compound adjectives and nouns that contain digits (7., 9., 1.3-litrainen, 1980-luvun)
            'digit' => ['numform' => 'digit'],
            # number expressed using Roman numerals
            # (I, D, II, III, V, I:lle, M:lle, X-ryhmä)
            'roman' => ['numform' => 'roman']
        },
        'encode_map' =>
        {
            'numtype' => { 'ord' => 'ORD',
                           '@'   => { 'numform' => { 'digit' => 'digit',
                                                     'roman' => 'roman' }}}
        }
    );
    # COPULA ####################
    # Copula verb: COP (olla = to be)
    $atoms{copula} = $self->create_simple_atom
    (
        'intfeature' => 'verbtype',
        'simple_decode_map' =>
        {
            'COP' => 'cop'
        }
    );
    # ADVERB TYPE ####################
    # MAN
    $atoms{advtype} = $self->create_atom
    (
        'surfeature' => 'advtype',
        'decode_map' =>
        {
            # manner adverb (rohkeasti = boldly, hitaasti = slowly, henkisesti = mentally)
            'MAN'    => ['advtype' => 'man'],
        },
        'encode_map' =>
        {
            'advtype' => { 'man' => 'MAN' }
        }
    );
    # CONJUNCTION TYPE ####################
    # COORD SUB
    $atoms{conjtype} = $self->create_simple_atom
    (
        'intfeature' => 'conjtype',
        'simple_decode_map' =>
        {
            # coordinating conjunction (ja, että, vai, sekä, mutta)
            'COORD' => 'coor',
            # subordinating conjunction (kun, vaikka, ettei, jos, koska)
            'SUB'   => 'sub',
            # comparating conjunction (kuin = as)
            'CMPR'  => 'comp'
        }
    );
    # PUNCTUATION TYPE ####################
    # DASH|PUNCT, PUNCT|QUOTE, PUNCT|ENDASH...
    $atoms{punctype} = $self->create_atom
    (
        'surfeature' => 'punctype',
        'decode_map' =>
        {
            'DASH'   => ['punctype' => 'dash'],
            'ENDASH' => ['punctype' => 'dash', 'other' => {'dashtype' => 'en'}],
            'EMDASH' => ['punctype' => 'dash', 'other' => {'dashtype' => 'em'}],
            'QUOTE'  => ['punctype' => 'quot']
        },
        'encode_map' =>
        {
            'punctype' => { 'dash' => { 'other/dashtype' => { 'en' => 'ENDASH',
                                                              'em' => 'EMDASH',
                                                              '@'  => 'DASH' }},
                            'quot' => 'QUOTE' }
        }
    );
    # DEGREE OF COMPARISON ####################
    $atoms{degree} = $self->create_simple_atom
    (
        'intfeature' => 'degree',
        'simple_decode_map' =>
        {
            # positive (kuuma, hyvä)
            'POS' => 'pos',
            # comparative (kuumempi, parempi)
            'CMP' => 'comp',
            # superlative (kuumin, paras)
            'SUP' => 'sup'
        }
    );
    # CASE ####################
    $atoms{case} = $self->create_simple_atom
    (
        'intfeature' => 'case',
        'simple_decode_map' =>
        {
            # nominative (koira = dog)
            'NOM' => 'nom',
            # genitive (koiran)
            'GEN' => 'gen',
            # partitive (koiraa)
            'PTV' => 'par',
            # essive (koirana)
            'ESS' => 'ess',
            # translative (koiraksi)
            'TRA' => 'tra',
            # inessive (koirassa)
            'INE' => 'ine',
            # elative (koirasta)
            'ELA' => 'ela',
            # illative (koiraan)
            'ILL' => 'ill',
            # adessive (koiralla)
            'ADE' => 'ade',
            # ablative (koiralta)
            'ABL' => 'abl',
            # allative (koiralle)
            'ALL' => 'all',
            # abessive (koiratta)
            'ABE' => 'abe',
            # comitative (koirineen)
            'CMT' => 'com',
            # instructive (koirin)
            'INS' => 'ins',
            # accusative: only with a few pronouns (meidät = us, sinut = thee, hänet = him, minut = me, heidät = them)
            'ACC' => 'acc'
        }
    );
    # NUMBER ####################
    $atoms{number} = $self->create_simple_atom
    (
        'intfeature' => 'number',
        'simple_decode_map' =>
        {
            # singular (kala = fish)
            'SG' => 'sing',
            # plural (kalat)
            'PL' => 'plur'
        }
    );
    # POSSESSIVE SUFFIX ####################
    $atoms{poss} = $self->create_atom
    (
        'surfeature' => 'poss',
        'decode_map' =>
        {
            # 1st person singular (my) (tyttäreni = my daughter)
            '1SG' => ['poss' => 'poss', 'possperson' => '1', 'possnumber' => 'sing'],
            # 2nd person singular (your) (tyttäresi)
            '2SG' => ['poss' => 'poss', 'possperson' => '2', 'possnumber' => 'sing'],
            # 3rd person singular or plural (his, her, its, their) (tyttärensä)
            '3'   => ['poss' => 'poss', 'possperson' => '3'],
            # 1st person plural (our) (tyttäremme)
            '1PL' => ['poss' => 'poss', 'possperson' => '1', 'possnumber' => 'plur'],
            # 2nd person plural (your) (tyttärenne)
            '2PL' => ['poss' => 'poss', 'possperson' => '2', 'possnumber' => 'plur']
        },
        'encode_map' =>
        {
            'possperson' => { '1' => { 'possnumber' => { 'plur' => '1PL',
                                                         '@'    => '1SG' }},
                              '2' => { 'possnumber' => { 'plur' => '2PL',
                                                         '@'    => '2SG' }},
                              '3' => '3' }
        }
    );
    # MOOD ####################
    $atoms{mood} = $self->create_atom
    (
        'surfeature' => 'mood',
        'decode_map' =>
        {
            # There is no feature for indicative forms (lukee = reads, menee = goes).
            # imperative (lue, mene)
            'IMPV' => ['verbform' => 'fin', 'mood' => 'imp'],
            # conditional (lukisi, menisi)
            'COND' => ['verbform' => 'fin', 'mood' => 'cnd'],
            # potential (lukenee, mennee)
            'POTN' => ['verbform' => 'fin', 'mood' => 'pot']
        },
        'encode_map' =>
        {
            'mood' => { 'imp' => 'IMPV',
                        'cnd' => 'COND',
                        'pot' => 'POTN' }
        }
    );
    # TENSE ####################
    $atoms{tense} = $self->create_simple_atom
    (
        'intfeature' => 'tense',
        'simple_decode_map' =>
        {
            # present (haluan = I want to)
            'PRES' => 'pres',
            # past (halusin = I wanted to)
            'PAST' => 'past'
        }
    );
    # VOICE ####################
    $atoms{voice} = $self->create_simple_atom
    (
        'intfeature' => 'voice',
        'simple_decode_map' =>
        {
            # active (uin = I swim)
            'ACT' => 'act',
            # passive (uidaan)
            'PSS' => 'pass'
        }
    );
    # PERSON AND NUMBER OF THE SUBJECT OF THE VERB ####################
    $atoms{person} = $self->create_atom
    (
        'surfeature' => 'poss',
        'decode_map' =>
        {
            # Person: SG1 SG2 SG3 PL1 PL2 PL3 PE4
            # 1st person singular (menen = I go)
            'SG1' => ['number' => 'sing', 'person' => '1'],
            # 2nd person singular (menet = you go)
            'SG2' => ['number' => 'sing', 'person' => '2'],
            # 3rd person singular (menee = he goes)
            'SG3' => ['number' => 'sing', 'person' => '3'],
            # 1st person plural (menemme = we go)
            'PL1' => ['number' => 'plur', 'person' => '1'],
            # 2nd person plural (menette = you go)
            'PL2' => ['number' => 'plur', 'person' => '2'],
            # 3rd person plural (menevät = they go)
            'PL3' => ['number' => 'plur', 'person' => '3'],
            # passive ending (mennään)
            # In modern colloquial Finnish, the passive form of the verb is used instead of the active first person plural indicative and imperative.
            # We cannot set 'style' => 'coll' because the tagset includes means to mark colloquial language and it does not apply it here.
            # (Setting 'style' => 'coll' would mean that on encoding we would produce the 'st-cllq' feature that was not in the input tag.)
            'PE4' => ['number' => 'plur', 'person' => '1', 'variant' => '6']
        },
        'encode_map' =>
        {
            'number' => { 'sing' => { 'person' => { '1' => 'SG1',
                                                    '2' => 'SG2',
                                                    '3' => 'SG3' }},
                          'plur' => { 'person' => { '1' => { 'variant' => { '6' => 'PE4',
                                                                            '@' => 'PL1' }},
                                                    '2' => 'PL2',
                                                    '3' => 'PL3' }}}
        }
    );
    # NEGATIVENESS ####################
    $atoms{neg} = $self->create_atom
    (
        'surfeature' => 'neg',
        'decode_map' =>
        {
            # negative verb (en, et, ei)
            # Sometimes even verbs have NEG and not NEGV, so we must remember the distinction in the 'other' feature.
            'NEGV' => ['negativeness' => 'neg', 'other' => {'negativeness' => 'negv'}],
            # negative form (en tehnyt = I did not do)
            'NEG'  => ['negativeness' => 'neg', 'other' => {'negativeness' => 'neg'}]
        },
        'encode_map' =>
        {
            'other/negativeness' => { 'negv' => 'NEGV',
                                      'neg'  => 'NEG',
                                      '@'    => { # for some reason, copula verbs do not use NEGV but NEG
                                                  'negativeness' => { 'neg' => { 'pos' => { 'verb' => { 'verbtype' => { 'cop' => 'NEG',
                                                                                                                        '@'   => 'NEGV' }},
                                                                                            'conj' => 'NEGV',
                                                                                            '@'    => 'NEG' }}}}}
        }
    );
    # INFINITIVE ####################
    # There are several verb forms in Finnish that are called infinitives.
    # Infinitives: INF1 INF2 INF3 INF5
    # The 4th infinitive (tuleminen) is interpreted as a noun.
    $atoms{inf} = $self->create_atom
    (
        'surfeature' => 'inf',
        'decode_map' =>
        {
            # 1st infinitive (tulla, tullakseni = to become)
            'INF1' => ['verbform' => 'inf', 'variant' => '1'],
            # 2nd infinitive (tullessaan, tullessa)
            'INF2' => ['verbform' => 'inf', 'variant' => '2'],
            # 3rd infinitive (tulemaan)
            'INF3' => ['verbform' => 'ger'],
            # 5th infinitive (tulemaisillaan)
            'INF5' => ['verbform' => 'inf', 'variant' => '5']
        },
        'encode_map' =>
        {
            'verbform' => { 'inf' => { 'variant' => { '5' => 'INF5',
                                                      '2' => 'INF2',
                                                      '@' => 'INF1' }},
                            'ger' => 'INF3' }
        }
    );
    # PARTICIPLE ####################
    # Participles: PCP1 PCP2
    $atoms{pcp} = $self->create_atom
    (
        'surfeature' => 'pcp',
        'decode_map' =>
        {
            # 1st participle (lentävä = flying, lennettävä = flown)
            'PCP1' => ['verbform' => 'part', 'variant' => '1'],
            # 2nd participle (lentänyt = flown, lennetty = flown)
            'PCP2' => ['verbform' => 'part', 'variant' => '2']
        },
        'encode_map' =>
        {
            'verbform' => { 'part' => { 'variant' => { '2' => 'PCP2',
                                                       '@' => 'PCP1' }}}
        }
    );
    # CLITIC ####################
    # Clitics: hAn kA kAAn kin kO pA s
    $atoms{clitic} = $self->create_atom
    (
        'surfeature' => 'clitic',
        'decode_map' =>
        {
            # Appealing clitic -han/-hän (poikahan).
            # This clitic is to appeal to the listener:
            # Olethan kävellyt?
            # You have walked, right?
            'hAn'   => ['other' => {'clitic' => 'hAn'}],
            # Copulative clitic -ka/-kä (eikä).
            # This clitic is used in negative forms to work as copula:
            # en juokse enkä kävele
            # I don't run nor (do I) walk.
            'kA'    => ['other' => {'clitic' => 'kA'}],
            # -kaan/-kään (poikakaan)
            'kAAn'  => ['other' => {'clitic' => 'kAAn'}],
            # -kin (poikakin)
            'kin'   => ['other' => {'clitic' => 'kin'}],
            # -ko/-kö (oletko)
            'kO'    => ['other' => {'clitic' => 'kO'}],
            # -kohan/-köhän (miksiköhän = I wonder why, olisikohan = I wonder if)
            'kOhAn' => ['other' => {'clitic' => 'kOhAn'}],
            # -pa/-pä (oletpa)
            'pA'    => ['other' => {'clitic' => 'pA'}],
            # Emphatic (zdůrazňovací) clitic -s (onpas)
            's'     => ['other' => {'clitic' => 's'}]
        },
        'encode_map' =>
        {
            'other/clitic' => { 'hAn'   => 'hAn',
                                'kA'    => 'kA',
                                'kAAn'  => 'kAAn',
                                'kin'   => 'kin',
                                'kO'    => 'kO',
                                'kOhAn' => 'kOhAn',
                                'pA'    => 'pA',
                                's'     => 's' }
        }
    );
    # STYLE ####################
    # Style: st-arch st-cllq st-derog st-slang st-vrnc st-hi
    # archaic colloquial derogative slang vernacular hi?
    # zastaralý hovorový hanlivý slang nářečí knižní?
    $atoms{style} = $self->create_simple_atom
    (
        'intfeature' => 'style',
        'simple_decode_map' =>
        {
            'st-arch'  => 'arch',
            'st-cllq'  => 'coll',
            'st-derog' => 'derg',
            'st-slang' => 'slng',
            'st-vrnc'  => 'vrnc',
            'st-hi'    => 'form'
        }
    );
    # UPPERCASE ####################
    # up: is the first letter of the word form uppercase?
    # We can decode and recover this information but we will not show it in our list of known tags.
    $atoms{up} = $self->create_atom
    (
        'surfeature' => 'up',
        'decode_map' =>
        {
            'up' => ['other' => {'uppercase' => 'yes'}]
        },
        'encode_map' =>
        {
            'other/uppercase' => { 'yes' => 'up' }
        }
    );
    # TRUNCATED COMPOUND ####################
    # TrunCo seems to mark hyphenated prefixes occurring separately.
    $atoms{trunco} = $self->create_simple_atom
    (
        'intfeature' => 'hyph',
        'simple_decode_map' =>
        {
            'TrunCo' => 'hyph'
        }
    );
    # UNKNOWN FEATURES ####################
    # LAT REF TEMP
    $atoms{unknown} = $self->create_atom
    (
        'surfeature' => 'unknown',
        'decode_map' =>
        {
            # LAT ???
            # Typically occurs with the first infinitive (LAT|INF1|V).
            # It never occurs without INF1 and I found only three INF1 tags without LAT (all three were in the translative case).
            'LAT' => ['other' => {'lat' => 'yes'}],
            # REF ???
            # A very rare feature of verbs. Reflexivity?
            # PAST|PSS|REF|V: julkaistun = published, mietityn = thought about, tuomitun = convicted
            # "tuomitun" is homonymous with the second participle in genitive (in nominative, it is "tuomittu")
            # same with "julkaistun" (nominative participle "julkaistu") but not with "mietityn"
            # PSS|REF|PRES|V: tultavan (tulla = become), kuvattavan (kuvata = shoot), hoidettavan (hoitaa = manage)
            # similar to the first participle: tultava
            'REF' => ['other' => {'ref' => 'yes'}],
            # TEMP ???
            # Rare feature of PAST|ACT verbs ending in -tua, -tyä, -tuaan.
            # Maybe it expresses "after doing the action of the verb"?
            # tultua = after the entry (tulla = become); iskettyä = struck (iskeä = strike); kirjattua = recognized (kirjata = record)
            'TEMP' => ['other' => {'temp' => 'yes'}],
        },
        'encode_map' =>
        {
            'other/lat' => { 'yes' => 'LAT',
                             '@'   => { 'other/ref' => { 'yes' => 'REF',
                                                         '@'   => { 'other/temp' => { 'yes' => 'TEMP' }}}}}
        }
    );
    # *null* node inserted instead of ellided token; it is always tagged as a special case of verb (the tag is "V|NULL").
    # S mysteriously occurs with a few foreign words (child, monkey, death); tags "S|FORGN" and "S|FORGN|up".
    # The 't-EUparl' "feature" is probably a bug in data preparation / tagging.
    # It occurs only once, with the word 'europarlamenttivaaleissa' (= EU Parliament polls).
    # There are several other similar.
    # if($feature =~ m/^t-(EUparl|MSilocat|MSasiakirja|EU-vk|MSolocat|MSlukumäärä)$/)
    # -pi ####################
    # -pi (ompi = finer, nicer) ???
    # Not found in the corpus.
    # Other features occur in data although they are not documented.
    # MERGED ATOM TO DECODE ANY FEATURE VALUE ####################
    my @fatoms = map {$atoms{$_}} @{$self->features_all()};
    $atoms{feature} = $self->create_merged_atom
    (
        'surfeature' => 'feature',
        'atoms'      => \@fatoms
    );
    return \%atoms;
}



#------------------------------------------------------------------------------
# Various DV-, DN- and DA- features mark morphemes that derive new word and
# change the part of speech. Several DX- features can occur in one tag, e.g.
# 1PL|DV-ILE|ELA|N|DV-U|SG or DA-UUS|3|N|DN-LLINEN|PTV|SG.
#
# If the tag contains one or more features describing derivational processes,
# this method will group those features into one. This way we get something
# that can be handled as one feature and stored in the 'other' feature of
# Interset.
#
# The following derivation features occur in the data:
#
# Deverbatives. The resulting part of speech marked in a separate feature and
# it can be noun, adjective or adverb.
#
# DV-NEISUUS 5
# All examples of DV-NEISUUS are nouns and are tagged N.
# eristyneisyys = isolation (eriste = insulation); kuolleisuus = mortality; oppineisuus = erudition (oppia = learn)
#
# DV-NTI 49
# All examples of DV-NTI are nouns and are tagged N.
# myynti = sale (myydä = to sell); luettelointi = listing (luetteloida = to list); ulosvienti = going out (viedä = to export)
#
# DV-NA 2
# All examples of DV-NA are nouns and are tagged N.
# kutina = itch; kahina = rustling
#
# DV-VAINEN 38
# Examples of DV-VAINEN are tagged as A, ADV or N.
# adjective: tyytyväinen = pleased; luottavainen = trusting
# adverb: päättäväisemmin = decisively (päättäväinen = resolute)
# The noun examples also contain DA-UUS that derives nouns from adjectives.
# DA-UUS appears earlier in the feature sequence but it was applied later in the word formation process.
# noun (DA-UUS|NOM|SG|DV-VAINEN|N): tulevaisuus = future (tulla = come, become; tulevainen = coming; tulevaisuus = that what is coming)
#
# DV-MATON 51
# DV-JA 594
# DV-SKELE 5
# DV-MINEN 382
# DV-MA 142
# DV-UTTA 1
# DV-NTAA 40
# DV-NTA 98
# DV-ELE 176
# DV-TTA 259
# DV-US 643
# DV-U 505
# DV-ILE 63
# DV-UTU 46
#
# Denominatives. The resulting part of speech is marked in a separate feature
# and usually it is A or ADV. (It can be noun if there are two derivations,
# e.g. aktiivisuus has DN-INEN (created aktiivinen = active) and DA-UUS
# (created aktiivisuus = activity).
# DN-INEN 44, DN-ITTAIN 34, DN-LAINEN 168, DN-LLINEN 329, DN-MAINEN 17,
# DN-TAR 1, DN-TON 40
#
# Deadjectives. The resulting part of speech is noun and they are tagged "N".
# DA-US 101 ... sairaus = illness, rakkaus = love
# DA-UUS 280 ... varmuus = affirmation, tyhjyys = emptiness
#------------------------------------------------------------------------------
sub decode_derivation
{
    my $self = shift;
    my $tag = shift;
    my @features = split(/\|/, $tag);
    my @features1 = grep {!m/^D[VNA]-/} @features;
    my $tag1 = join('|', @features1);
    my @dev = grep {m/^D[VNA]-/} @features;
    my $derivation = join('+', @dev);
    return ($tag1, $derivation);
}



#------------------------------------------------------------------------------
# Decodes a physical tag (string) and returns the corresponding feature
# structure.
#------------------------------------------------------------------------------
sub decode
{
    my $self = shift;
    my $tag = shift;
    my $fs = Lingua::Interset::FeatureStructure->new();
    $fs->set_tagset('fi::turku');
    my $atoms = $self->atoms();
    # Tag is a sequence of features separated by vertical bars.
    # There are just the feature values, not attribute-value pairs.
    # example: N|NOM|SG
    # Separate the derivational features. There may be more than one.
    my $derivation;
    ($tag, $derivation) = $self->decode_derivation($tag);
    my @features = split(/\|/, $tag);
    my $is_conjunction = 0;
    foreach my $feature (@features)
    {
        # Some words are tagged as conjunctions and verbs at the same time:
        # muttei = but not (C|NEGV|SG3|COORD|V)
        # ettei = that there is no (ettemme C|NEGV|SUB|PL1|V)
        # eivätkä = and not (C|PL3|NEGV|kA|COORD|V)
        # ellei = unless (C|SUB|SG3|NEGV|V)
        # The first (left) part-of-speech feature should be preferred.
        # Features are probably ordered as new affixes are identified and removed during analysis.
        # The rightmost feature ("V") applies to the stem in the lexicon, while the leftmost feature ("C") identifies the resulting part of speech.
        # We will remove the "V" from the tags returned by list() so that tests can be passed.
        # However, we will decode the tag correctly. We will not preserve the "V" when encoding.
        $is_conjunction = 1 if($feature eq 'C');
        next if($feature eq 'V' && $is_conjunction);
        $atoms->{feature}->decode_and_merge_hard($feature, $fs);
    }
    # Add the derivational information to the other feature.
    if(defined($derivation) && $derivation ne '')
    {
        my $other = $fs->other();
        my %hash;
        if(ref($other) ne 'HASH')
        {
            $other = \%hash;
        }
        $other->{'derivation'} = $derivation;
        $fs->set('other', $other);
    }
    return $fs;
}



#------------------------------------------------------------------------------
# Takes feature structure and returns the corresponding physical tag (string).
#------------------------------------------------------------------------------
sub encode
{
    my $self = shift;
    my $fs = shift; # Lingua::Interset::FeatureStructure
    my @feature_names = @{$self->features_all()};
    my $atoms = $self->atoms();
    my @features = ();
    # Verbs use the SG1 ... PL3 features and they do not use the SG / PL features.
    my $number_with_person = $fs->person() ne '';
    foreach my $feature (@feature_names)
    {
        next if($number_with_person && $feature eq 'number');
        my $value = $atoms->{$feature}->encode($fs);
        push(@features, $value) unless($value eq '');
    }
    # If there is information on derivational morphology, add it to the features.
    my $derivation = $fs->get_other_subfeature('fi::turku', 'derivation');
    my @derivation = split(/\+/, $derivation);
    if(@derivation)
    {
        push(@features, @derivation);
    }
    my $tag = join('|', @features);
    return $tag;
}



#------------------------------------------------------------------------------
# Returns reference to list of known tags.
# Tags were collected from the corpus.
# 1939 tags have been observed in the corpus.
# We removed some problematic or erroneous tags.
# Removed features:
# up ... the word starts with an uppercase letter
# 1550 tags survived.
# Then we added missing combinations of number+case for nominals and
# person+number for verbs.
# XXXX total tags after the extension.
#------------------------------------------------------------------------------
sub list
{
    my $self = shift;
    my $list = <<end_of_list
A
ABBR
ABBR|ABL|SG
ABBR|ADE|SG
ABBR|ALL|SG
ABBR|ELA|SG
ABBR|ESS|SG
ABBR|GEN|SG
ABBR|INE|SG
ABBR|NOM|SG
ABBR|NOM|SG|3
ABBR|NOM|SG|TrunCo
ABBR|PTV|SG
ABBR|digit
ABBR|digit|ABL|SG
ABBR|digit|ELA|SG
ABBR|digit|GEN|SG
ABBR|digit|ILL|SG
ABBR|digit|INE|SG
ABBR|digit|NOM|SG
ABBR|digit|NOM|SG|TrunCo
ABBR|digit|PTV|SG
ABBR|roman|ABL|SG
ABBR|roman|ALL|SG
ABBR|roman|GEN|SG
ABBR|roman|INE|SG
ABBR|roman|NOM|SG
ABBR|roman|PTV|SG
AD-A
AD-A|kin
ADV
ADV|3
ADV|ABBR
ADV|ABL
ADV|ADE
ADV|ADE|3
ADV|ADE|kAAn
ADV|ADE|kin
ADV|ALL
ADV|ALL|3
ADV|ALL|kin
ADV|ALL|st-cllq
ADV|CMP|ADE
ADV|CMP|ESS
ADV|CMP|ESS|kin
ADV|CMP|PTV
ADV|DN-ITTAIN
ADV|DN-ITTAIN|DV-JA
ADV|ELA
ADV|ILL
ADV|ILL|3
ADV|ILL|kin
ADV|INE
ADV|INE|3
ADV|INTERR
ADV|MAN
ADV|MAN|CMP
ADV|MAN|CMP|DV-VAINEN
ADV|MAN|POS
ADV|MAN|POS|ACT|PCP1
ADV|MAN|POS|ACT|PCP2
ADV|MAN|POS|ACT|PCP2|DV-U
ADV|MAN|POS|DN-INEN
ADV|MAN|POS|DN-LLINEN
ADV|MAN|POS|DN-MAINEN
ADV|MAN|POS|DN-TON
ADV|MAN|POS|DV-MATON
ADV|MAN|POS|DV-US|DN-LLINEN
ADV|MAN|POS|PSS|PCP1
ADV|MAN|POS|PSS|PCP2
ADV|MAN|POS|st-cllq
ADV|MAN|SUP
ADV|REL
ADV|hAn
ADV|kAAn
ADV|kin
ADV|pA
ART|FORGN
A|CMP|ABL|PL|3
A|CMP|ABL|SG
A|CMP|ADE|PL
A|CMP|ADE|SG
A|CMP|ADE|SG|kin
A|CMP|ALL|PL
A|CMP|ALL|SG
A|CMP|ELA|PL
A|CMP|ELA|SG
A|CMP|ESS|SG
A|CMP|GEN|PL
A|CMP|GEN|SG
A|CMP|ILL|PL
A|CMP|ILL|SG
A|CMP|ILL|SG|DN-LLINEN
A|CMP|INE|PL
A|CMP|INE|SG
A|CMP|INS|PL
A|CMP|NOM|PL
A|CMP|NOM|PL|ACT|PCP2
A|CMP|NOM|PL|kin
A|CMP|NOM|SG
A|CMP|NOM|SG|ACT|PCP1
A|CMP|PTV|PL
A|CMP|PTV|PL|PSS|PCP1
A|CMP|PTV|SG
A|CMP|PTV|SG|ACT|PCP1
A|CMP|PTV|SG|DN-LLINEN
A|CMP|PTV|SG|kin
A|CMP|TRA|PL|DN-LLINEN
A|CMP|TRA|SG
A|CMP|TRA|SG|kin
A|COP|POS|ELA|PL|ACT|PCP2
A|COP|POS|GEN|PL|ACT|PCP2
A|COP|POS|PTV|PL|ACT|PCP2
A|FORGN
A|INTERR|POS|ELA|SG
A|INTERR|POS|ESS|SG
A|INTERR|POS|GEN|PL
A|INTERR|POS|GEN|SG
A|INTERR|POS|NOM|SG
A|INTERR|POS|PTV|PL
A|INTERR|POS|PTV|SG
A|POS|ABL|PL
A|POS|ABL|SG
A|POS|ABL|SG|DN-INEN
A|POS|ABL|SG|DN-LLINEN
A|POS|ABL|SG|DV-MATON
A|POS|ADE|PL
A|POS|ADE|PL|3
A|POS|ADE|PL|DN-INEN
A|POS|ADE|SG
A|POS|ADE|SG|3
A|POS|ADE|SG|DN-INEN
A|POS|ADE|SG|DN-LLINEN
A|POS|ADE|SG|kAAn
A|POS|ADE|SG|kin
A|POS|ALL|PL
A|POS|ALL|PL|DN-LLINEN
A|POS|ALL|PL|DV-MATON
A|POS|ALL|SG
A|POS|ALL|SG|DN-INEN
A|POS|ALL|SG|DN-LLINEN
A|POS|CMT
A|POS|ELA|PL
A|POS|ELA|PL|DN-LLINEN
A|POS|ELA|PL|DN-MAINEN
A|POS|ELA|PL|DV-MATON
A|POS|ELA|PL|DV-U
A|POS|ELA|SG
A|POS|ELA|SG|DN-LLINEN
A|POS|ELA|SG|DN-MAINEN
A|POS|ELA|SG|DN-TON
A|POS|ELA|SG|DV-MATON
A|POS|ESS|PL
A|POS|ESS|PL|DN-LLINEN
A|POS|ESS|PL|DV-VAINEN
A|POS|ESS|PL|kin
A|POS|ESS|SG
A|POS|ESS|SG|DN-LLINEN
A|POS|ESS|SG|DN-TON
A|POS|ESS|SG|DV-MATON
A|POS|GEN|PL
A|POS|GEN|PL|DN-INEN
A|POS|GEN|PL|DN-LLINEN
A|POS|GEN|PL|DN-TON
A|POS|GEN|PL|DV-MATON
A|POS|GEN|PL|DV-NTA|DN-LLINEN
A|POS|GEN|SG
A|POS|GEN|SG|2SG
A|POS|GEN|SG|DN-INEN
A|POS|GEN|SG|DN-LLINEN
A|POS|GEN|SG|DN-MAINEN
A|POS|GEN|SG|DN-TON
A|POS|GEN|SG|DV-MATON
A|POS|GEN|SG|DV-MATON|DV-U
A|POS|GEN|SG|DV-NTAA
A|POS|GEN|SG|DV-US|DN-LLINEN
A|POS|GEN|SG|kin
A|POS|GEN|SG|st-cllq
A|POS|ILL|PL
A|POS|ILL|PL|DN-LLINEN
A|POS|ILL|PL|DV-MATON
A|POS|ILL|PL|DV-U
A|POS|ILL|SG
A|POS|ILL|SG|DN-INEN
A|POS|ILL|SG|DN-LLINEN
A|POS|ILL|SG|DN-TON
A|POS|ILL|SG|DV-MATON
A|POS|ILL|SG|kin
A|POS|INE|PL
A|POS|INE|PL|DN-LLINEN
A|POS|INE|PL|DN-MAINEN
A|POS|INE|PL|DV-MATON|DV-U
A|POS|INE|PL|DV-VAINEN
A|POS|INE|SG
A|POS|INE|SG|DN-INEN
A|POS|INE|SG|DN-LLINEN
A|POS|INE|SG|DN-TON
A|POS|INE|SG|DV-MATON
A|POS|INE|SG|kin
A|POS|INS|PL
A|POS|NOM|PL
A|POS|NOM|PL|1SG
A|POS|NOM|PL|DN-INEN
A|POS|NOM|PL|DN-LLINEN
A|POS|NOM|PL|DN-TON
A|POS|NOM|PL|DV-MATON
A|POS|NOM|PL|kO
A|POS|NOM|PL|st-cllq
A|POS|NOM|SG
A|POS|NOM|SG|1PL
A|POS|NOM|SG|1SG
A|POS|NOM|SG|3
A|POS|NOM|SG|DN-INEN
A|POS|NOM|SG|DN-LLINEN
A|POS|NOM|SG|DN-MAINEN
A|POS|NOM|SG|DN-TON
A|POS|NOM|SG|DV-MATON
A|POS|NOM|SG|DV-US|DN-LLINEN
A|POS|NOM|SG|DV-VAINEN
A|POS|NOM|SG|TrunCo
A|POS|NOM|SG|kin
A|POS|NOM|SG|kin|DN-LLINEN
A|POS|NOM|SG|st-cllq
A|POS|PTV|PL
A|POS|PTV|PL|1SG
A|POS|PTV|PL|3
A|POS|PTV|PL|DN-INEN
A|POS|PTV|PL|DN-LLINEN
A|POS|PTV|PL|DN-TON
A|POS|PTV|PL|DV-MATON
A|POS|PTV|PL|DV-U
A|POS|PTV|PL|DV-US|DN-LLINEN
A|POS|PTV|PL|DV-US|DV-TTA|DN-LLINEN
A|POS|PTV|PL|DV-UTU
A|POS|PTV|PL|DV-VAINEN
A|POS|PTV|PL|st-cllq
A|POS|PTV|SG
A|POS|PTV|SG|3
A|POS|PTV|SG|DN-INEN
A|POS|PTV|SG|DN-LLINEN
A|POS|PTV|SG|DN-MAINEN
A|POS|PTV|SG|DN-TON
A|POS|PTV|SG|DV-MATON
A|POS|PTV|SG|DV-TTA
A|POS|PTV|SG|TrunCo
A|POS|PTV|SG|kin
A|POS|PTV|SG|kin|DN-LLINEN
A|POS|PTV|SG|st-cllq
A|POS|TRA|PL
A|POS|TRA|PL|DN-INEN
A|POS|TRA|PL|DN-LLINEN
A|POS|TRA|PL|DV-MATON
A|POS|TRA|PL|DV-VAINEN
A|POS|TRA|SG
A|POS|TRA|SG|3
A|POS|TRA|SG|DN-INEN
A|POS|TRA|SG|DN-LLINEN
A|POS|TRA|SG|DN-MAINEN
A|POS|TRA|SG|DN-TON
A|PROP|POS|ABL|PL|DN-LAINEN
A|PROP|POS|ABL|SG|DN-LAINEN
A|PROP|POS|ADE|SG|DN-LAINEN
A|PROP|POS|ALL|PL|DN-LAINEN
A|PROP|POS|ALL|SG|DN-LAINEN
A|PROP|POS|ELA|PL|DN-LAINEN
A|PROP|POS|ELA|SG|DN-LAINEN
A|PROP|POS|ESS|SG|DN-LAINEN
A|PROP|POS|GEN|PL|DN-LAINEN
A|PROP|POS|GEN|SG|DN-LAINEN
A|PROP|POS|ILL|PL|DN-LAINEN
A|PROP|POS|ILL|SG|DN-LAINEN
A|PROP|POS|INE|PL|DN-LAINEN
A|PROP|POS|INE|SG|DN-LAINEN
A|PROP|POS|NOM|PL|DN-LAINEN
A|PROP|POS|NOM|SG|DN-LAINEN
A|PROP|POS|PTV|PL|DN-LAINEN
A|PROP|POS|PTV|SG|DN-LAINEN
A|PROP|POS|TRA|SG|DN-LAINEN
A|SUP|ABL|SG
A|SUP|ADE|PL|3
A|SUP|ADE|SG
A|SUP|ALL|PL
A|SUP|ELA|PL
A|SUP|ELA|PL|ACT|PCP1
A|SUP|ELA|PL|DN-LLINEN
A|SUP|ELA|PL|PSS|PCP2
A|SUP|ELA|SG
A|SUP|ELA|SG|PSS|PCP2
A|SUP|ELA|SG|kin
A|SUP|ESS|SG
A|SUP|ESS|SG|DN-LLINEN
A|SUP|ESS|SG|PSS|PCP2
A|SUP|GEN|PL
A|SUP|GEN|SG
A|SUP|GEN|SG|PSS|PCP2
A|SUP|ILL|PL
A|SUP|ILL|PL|PSS|PCP2
A|SUP|INE|SG
A|SUP|NOM|PL
A|SUP|NOM|PL|ACT|PCP1
A|SUP|NOM|SG
A|SUP|NOM|SG|3
A|SUP|NOM|SG|ACT|PCP1
A|SUP|NOM|SG|ACT|PCP2
A|SUP|NOM|SG|DN-INEN
A|SUP|NOM|SG|DN-LLINEN
A|SUP|NOM|SG|PSS|PCP1
A|SUP|NOM|SG|PSS|PCP2
A|SUP|NOM|SG|PSS|PCP2|DV-ELE
A|SUP|NOM|SG|kAAn
A|SUP|NOM|SG|st-cllq
A|SUP|PTV|PL
A|SUP|PTV|PL|ACT|PCP1
A|SUP|PTV|PL|ACT|PCP2
A|SUP|PTV|PL|PSS|PCP2
A|SUP|PTV|SG
A|SUP|PTV|SG|DV-MATON
A|SUP|TRA|SG
A|TrunCo
A|digit|POS|ALL|PL
A|digit|POS|ELA|SG
A|digit|POS|ESS|SG
A|digit|POS|GEN|PL
A|digit|POS|GEN|SG
A|digit|POS|NOM|PL
A|digit|POS|NOM|SG
A|digit|POS|PTV|SG
C
COP|POS|ELA|PL|ACT|PCP1
COP|POS|ELA|SG|ACT|PCP1
COP|POS|GEN|SG|ACT|PCP1
COP|POS|GEN|SG|ACT|PCP2
COP|POS|ILL|SG|ACT|PCP1
COP|POS|NOM|PL|ACT|PCP1
COP|POS|NOM|PL|ACT|PCP2
COP|POS|NOM|SG|3|ACT|PCP1
COP|POS|NOM|SG|ACT|PCP1
COP|POS|NOM|SG|ACT|PCP2
COP|POS|PTV|SG|ACT|PCP1
COP|POS|PTV|SG|ACT|PCP2
COP|POS|TRA|PL|ACT|PCP1
C|CMPR
C|COORD
C|COORD|PL3|NEGV|kA
C|COORD|SG1|NEGV|kA
C|COORD|SG3|NEGV
C|COORD|SG3|NEGV|kA
C|COORD|st-arch
C|FORGN
C|SUB
C|SUB|PL1|NEGV
C|SUB|PL3|NEGV
C|SUB|SG1|NEGV
C|SUB|SG1|NEGV|kO
C|SUB|SG3|NEGV
C|SUB|SG3|NEGV|kO
C|SUB|kin
C|SUB|pA
FORGN
INTJ
INTJ|st-cllq
NON-TWOL
NON-TWOL|TrunCo
NUM|ABL|SG
NUM|ADE|SG
NUM|ALL|SG
NUM|ELA|SG
NUM|ESS|SG
NUM|GEN|PL
NUM|GEN|SG
NUM|ILL|PL
NUM|ILL|SG
NUM|INE|SG
NUM|NOM|PL
NUM|NOM|SG
NUM|ORD|ADE|SG
NUM|ORD|ALL|SG
NUM|ORD|ESS|SG
NUM|ORD|GEN|SG
NUM|ORD|ILL|SG
NUM|ORD|INE|SG
NUM|ORD|NOM|PL
NUM|ORD|NOM|SG
NUM|ORD|PTV|PL
NUM|ORD|PTV|SG
NUM|ORD|TRA|SG
NUM|PTV|PL
NUM|PTV|SG
NUM|TRA|SG
N|ABE|SG
N|ABL|PL
N|ABL|PL|3
N|ABL|PL|3|DA-UUS
N|ABL|SG
N|ABL|SG|1PL|DV-NTA
N|ABL|SG|3
N|ABL|SG|3|DA-US
N|ABL|SG|3|DA-UUS
N|ABL|SG|3|DA-UUS|DN-LLINEN
N|ABL|SG|3|DV-US
N|ABL|SG|DA-US
N|ABL|SG|DA-UUS
N|ABL|SG|DV-JA
N|ABL|SG|DV-MINEN
N|ABL|SG|DV-US
N|ABL|SG|DV-U|DV-ILE
N|ABL|SG|st-cllq
N|ADE|PL
N|ADE|PL|3
N|ADE|PL|DV-JA
N|ADE|PL|DV-US
N|ADE|SG
N|ADE|SG|1PL
N|ADE|SG|1SG
N|ADE|SG|1SG|DV-TTA|DV-ELE
N|ADE|SG|1SG|DV-US
N|ADE|SG|3
N|ADE|SG|3|DV-NTA
N|ADE|SG|3|TrunCo
N|ADE|SG|DA-US
N|ADE|SG|DA-UUS
N|ADE|SG|DA-UUS|DV-VAINEN
N|ADE|SG|DV-JA
N|ADE|SG|DV-JA|DV-TTA
N|ADE|SG|DV-MA
N|ADE|SG|DV-MINEN
N|ADE|SG|DV-NTA
N|ADE|SG|DV-NTI
N|ADE|SG|DV-US
N|ADE|SG|DV-U|DV-ELE
N|ADE|SG|TrunCo
N|ADE|SG|kAAn
N|ADE|SG|kAAn|DV-JA
N|ADE|SG|kin
N|ADE|SG|st-cllq
N|ALL|PL
N|ALL|PL|1SG
N|ALL|PL|3
N|ALL|PL|3|DV-JA
N|ALL|PL|3|DV-US
N|ALL|PL|DV-ELE|DV-JA
N|ALL|PL|DV-JA
N|ALL|PL|DV-JA|DV-TTA
N|ALL|PL|DV-MA
N|ALL|PL|DV-NTA
N|ALL|PL|DV-U
N|ALL|PL|DV-US
N|ALL|SG
N|ALL|SG|1SG
N|ALL|SG|1SG|DV-MA
N|ALL|SG|3
N|ALL|SG|DA-US
N|ALL|SG|DV-JA
N|ALL|SG|DV-MA
N|ALL|SG|DV-MINEN
N|ALL|SG|DV-NTA
N|ALL|SG|DV-U
N|ALL|SG|DV-US
N|ALL|SG|DV-US|DV-TTA
N|ALL|SG|DV-U|DV-ELE
N|ALL|SG|DV-U|DV-MA
N|ALL|SG|TrunCo
N|ALL|SG|kin
N|ALL|SG|st-cllq
N|ALL|SG|st-hi
N|CMT
N|CMT|3
N|CMT|3|DV-JA
N|CMT|3|DV-NTI
N|CMT|3|DV-US
N|ELA|PL
N|ELA|PL|1SG
N|ELA|PL|3
N|ELA|PL|3|DA-US
N|ELA|PL|3|DV-MA
N|ELA|PL|3|DV-US
N|ELA|PL|DA-US
N|ELA|PL|DA-UUS
N|ELA|PL|DN-TON|DA-UUS
N|ELA|PL|DV-JA
N|ELA|PL|DV-JA|DV-TTA
N|ELA|PL|DV-MA
N|ELA|PL|DV-U
N|ELA|PL|DV-US
N|ELA|PL|DV-UTTA|DV-US
N|ELA|PL|TrunCo
N|ELA|PL|TrunCo|DV-US
N|ELA|PL|st-cllq
N|ELA|PL|st-slang
N|ELA|SG
N|ELA|SG|1PL
N|ELA|SG|1PL|DV-ILE|DV-U
N|ELA|SG|1SG
N|ELA|SG|1SG|st-cllq
N|ELA|SG|2PL
N|ELA|SG|3
N|ELA|SG|3|DV-JA
N|ELA|SG|3|DV-MINEN
N|ELA|SG|ACT|PCP1|DA-UUS
N|ELA|SG|DA-US
N|ELA|SG|DA-UUS
N|ELA|SG|DA-UUS|DN-LLINEN
N|ELA|SG|DA-UUS|DV-VAINEN
N|ELA|SG|DN-TON|DA-UUS
N|ELA|SG|DV-JA
N|ELA|SG|DV-MA
N|ELA|SG|DV-MINEN
N|ELA|SG|DV-NEISUUS
N|ELA|SG|DV-NTA
N|ELA|SG|DV-NTI
N|ELA|SG|DV-U
N|ELA|SG|DV-US
N|ELA|SG|DV-US|DV-TTA
N|ELA|SG|DV-UTU|DV-MINEN
N|ELA|SG|DV-U|DV-ELE
N|ELA|SG|DV-U|DV-MINEN
N|ELA|SG|PSS|PCP2|DA-US
N|ELA|SG|TrunCo
N|ELA|SG|st-cllq
N|ESS|PL
N|ESS|PL|3
N|ESS|PL|3|DV-JA
N|ESS|PL|DV-JA
N|ESS|PL|DV-JA|DV-TTA|DV-ELE
N|ESS|PL|DV-US
N|ESS|PL|st-cllq
N|ESS|SG
N|ESS|SG|3
N|ESS|SG|3|DV-JA
N|ESS|SG|DA-UUS
N|ESS|SG|DA-UUS|DV-MATON
N|ESS|SG|DV-ELE|DV-JA
N|ESS|SG|DV-JA
N|ESS|SG|DV-JA|DV-TTA
N|ESS|SG|DV-MA
N|ESS|SG|DV-MINEN
N|ESS|SG|DV-U
N|ESS|SG|DV-US
N|ESS|SG|kin
N|FORGN
N|FORGN|ESS|SG
N|FORGN|GEN|SG
N|FORGN|INE|SG
N|FORGN|NOM|SG
N|FORGN|PROP
N|FORGN|PROP|NOM|PL
N|FORGN|PROP|NOM|SG
N|FORGN|PTV|PL
N|FORGN|PTV|SG
N|GEN|PL
N|GEN|PL|1SG
N|GEN|PL|3
N|GEN|PL|3|DV-JA
N|GEN|PL|DA-US
N|GEN|PL|DA-UUS
N|GEN|PL|DV-JA
N|GEN|PL|DV-JA|DV-ILE
N|GEN|PL|DV-JA|DV-TTA
N|GEN|PL|DV-MA
N|GEN|PL|DV-MINEN
N|GEN|PL|DV-TTA
N|GEN|PL|DV-U
N|GEN|PL|DV-US
N|GEN|PL|DV-U|DV-ELE
N|GEN|PL|TrunCo
N|GEN|PL|kin
N|GEN|PL|st-cllq
N|GEN|PL|st-hi
N|GEN|SG
N|GEN|SG|1PL|DV-MATON|DA-UUS
N|GEN|SG|1SG
N|GEN|SG|3
N|GEN|SG|3|DA-US
N|GEN|SG|3|DV-JA
N|GEN|SG|3|DV-MA
N|GEN|SG|3|DV-NTA
N|GEN|SG|3|DV-US
N|GEN|SG|ACT|PCP1|DA-UUS
N|GEN|SG|ACT|PCP1|DA-UUS|DV-U
N|GEN|SG|DA-US
N|GEN|SG|DA-UUS
N|GEN|SG|DA-UUS|DN-LLINEN
N|GEN|SG|DA-UUS|DN-TON
N|GEN|SG|DA-UUS|DV-VAINEN
N|GEN|SG|DN-TON|DA-UUS
N|GEN|SG|DV-ELE
N|GEN|SG|DV-ELE|DV-JA
N|GEN|SG|DV-ILE
N|GEN|SG|DV-ILE|DV-U
N|GEN|SG|DV-JA
N|GEN|SG|DV-JA|DV-TTA
N|GEN|SG|DV-MA
N|GEN|SG|DV-MINEN
N|GEN|SG|DV-NEISUUS
N|GEN|SG|DV-NTA
N|GEN|SG|DV-NTAA
N|GEN|SG|DV-NTAA|DV-US
N|GEN|SG|DV-NTI
N|GEN|SG|DV-TTA
N|GEN|SG|DV-TTA|DV-U|DV-ELE
N|GEN|SG|DV-U
N|GEN|SG|DV-US
N|GEN|SG|DV-US|DV-TTA
N|GEN|SG|DV-UTU|DV-MINEN
N|GEN|SG|DV-U|DV-ELE
N|GEN|SG|DV-U|DV-ILE
N|GEN|SG|DV-U|DV-MINEN
N|GEN|SG|DV-U|DV-NEISUUS
N|GEN|SG|PSS|PCP2|DA-US
N|GEN|SG|TrunCo
N|GEN|SG|TrunCo|DA-UUS
N|GEN|SG|TrunCo|DV-US
N|GEN|SG|hAn
N|GEN|SG|kin
N|GEN|SG|st-arch
N|GEN|SG|st-cllq
N|GEN|SG|st-derog
N|GEN|SG|st-hi
N|GEN|SG|st-slang
N|GEN|SG|st-vrnc
N|ILL|PL
N|ILL|PL|1PL
N|ILL|PL|1SG
N|ILL|PL|1SG|DV-MA
N|ILL|PL|2SG
N|ILL|PL|3
N|ILL|PL|3|DV-US
N|ILL|PL|DA-US
N|ILL|PL|DA-UUS
N|ILL|PL|DN-TON|DA-UUS
N|ILL|PL|DV-JA
N|ILL|PL|DV-JA|DV-TTA
N|ILL|PL|DV-MA
N|ILL|PL|DV-MINEN
N|ILL|PL|DV-TTA
N|ILL|PL|DV-TTA|DV-U|DV-ELE
N|ILL|PL|DV-U
N|ILL|PL|DV-US
N|ILL|PL|DV-US|DV-TTA
N|ILL|PL|st-cllq
N|ILL|SG
N|ILL|SG|1PL
N|ILL|SG|1SG
N|ILL|SG|1SG|DV-JA
N|ILL|SG|1SG|st-cllq
N|ILL|SG|3
N|ILL|SG|3|DA-US
N|ILL|SG|3|DV-MA
N|ILL|SG|3|DV-MINEN|DV-U
N|ILL|SG|3|DV-NTA
N|ILL|SG|3|TrunCo|DV-US
N|ILL|SG|3|st-cllq
N|ILL|SG|ACT|PCP1|DA-UUS
N|ILL|SG|DA-US
N|ILL|SG|DA-UUS
N|ILL|SG|DA-UUS|DN-LLINEN
N|ILL|SG|DA-UUS|DV-MATON
N|ILL|SG|DA-UUS|DV-VAINEN
N|ILL|SG|DN-TON|DA-UUS
N|ILL|SG|DV-ILE
N|ILL|SG|DV-JA
N|ILL|SG|DV-JA|DV-TTA
N|ILL|SG|DV-MA
N|ILL|SG|DV-MINEN
N|ILL|SG|DV-MINEN|DV-U
N|ILL|SG|DV-NTA
N|ILL|SG|DV-NTAA|DV-MINEN
N|ILL|SG|DV-NTI
N|ILL|SG|DV-TTA
N|ILL|SG|DV-U
N|ILL|SG|DV-US
N|ILL|SG|DV-U|DV-MINEN
N|ILL|SG|TrunCo
N|ILL|SG|TrunCo|DV-US
N|ILL|SG|kAAn
N|ILL|SG|kin
N|ILL|SG|st-cllq
N|INE|PL
N|INE|PL|1PL
N|INE|PL|3
N|INE|PL|3|DV-NTA
N|INE|PL|3|DV-US
N|INE|PL|3|st-cllq
N|INE|PL|DA-UUS|DN-LLINEN
N|INE|PL|DN-TON|DA-UUS
N|INE|PL|DV-ILE
N|INE|PL|DV-JA
N|INE|PL|DV-MA
N|INE|PL|DV-U
N|INE|PL|DV-US
N|INE|PL|DV-US|DV-TTA
N|INE|PL|DV-UTU
N|INE|PL|DV-U|DV-ELE
N|INE|PL|DV-U|DV-MA
N|INE|PL|TrunCo
N|INE|PL|kin
N|INE|SG
N|INE|SG|1PL
N|INE|SG|1SG
N|INE|SG|3
N|INE|SG|3|DA-US
N|INE|SG|3|DA-UUS
N|INE|SG|3|DV-MA
N|INE|SG|3|DV-US
N|INE|SG|3|DV-U|DV-ELE
N|INE|SG|DA-US
N|INE|SG|DA-UUS
N|INE|SG|DA-UUS|DV-VAINEN
N|INE|SG|DN-TON|DA-UUS
N|INE|SG|DV-JA
N|INE|SG|DV-MA
N|INE|SG|DV-MINEN
N|INE|SG|DV-NTA
N|INE|SG|DV-NTI
N|INE|SG|DV-TTA
N|INE|SG|DV-U
N|INE|SG|DV-US
N|INE|SG|DV-US|DV-TTA
N|INE|SG|DV-UTU|DV-MINEN
N|INE|SG|DV-U|DV-ELE
N|INE|SG|DV-U|DV-ILE
N|INE|SG|TrunCo
N|INE|SG|TrunCo|DV-US
N|INE|SG|kin
N|INE|SG|st-cllq
N|INS|PL
N|INS|PL|DV-MA
N|INS|PL|DV-US
N|INS|PL|kin
N|INS|PL|st-cllq
N|NOM|PL
N|NOM|PL|1PL
N|NOM|PL|3
N|NOM|PL|3|DV-US
N|NOM|PL|DA-US
N|NOM|PL|DA-UUS
N|NOM|PL|DA-UUS|DN-TON
N|NOM|PL|DV-JA
N|NOM|PL|DV-JA|DV-TTA
N|NOM|PL|DV-MA
N|NOM|PL|DV-MINEN
N|NOM|PL|DV-NTA
N|NOM|PL|DV-TTA
N|NOM|PL|DV-U
N|NOM|PL|DV-US
N|NOM|PL|DV-US|DV-TTA
N|NOM|PL|DV-UTU|DV-MINEN
N|NOM|PL|DV-U|DV-ELE
N|NOM|PL|DV-U|DV-ILE
N|NOM|PL|TrunCo
N|NOM|PL|kin
N|NOM|PL|kin|DV-JA
N|NOM|PL|st-cllq
N|NOM|SG
N|NOM|SG|1PL
N|NOM|SG|1PL|DV-NTA
N|NOM|SG|1SG
N|NOM|SG|1SG|DA-UUS
N|NOM|SG|1SG|DV-MA
N|NOM|SG|1SG|DV-US
N|NOM|SG|1SG|PSS|PCP1|DA-UUS
N|NOM|SG|1SG|kin
N|NOM|SG|1SG|st-cllq
N|NOM|SG|2PL|DV-US
N|NOM|SG|2SG
N|NOM|SG|2SG|DV-JA
N|NOM|SG|2SG|kin
N|NOM|SG|3
N|NOM|SG|3|DA-US
N|NOM|SG|3|DA-UUS|DV-VAINEN
N|NOM|SG|3|DV-JA
N|NOM|SG|3|DV-MA
N|NOM|SG|3|DV-MINEN
N|NOM|SG|3|DV-NTA
N|NOM|SG|3|DV-U
N|NOM|SG|3|DV-US
N|NOM|SG|3|DV-U|DV-ELE
N|NOM|SG|3|TrunCo
N|NOM|SG|3|kin
N|NOM|SG|3|st-cllq
N|NOM|SG|ACT|PCP1|DA-UUS
N|NOM|SG|DA-US
N|NOM|SG|DA-UUS
N|NOM|SG|DA-UUS|DN-INEN
N|NOM|SG|DA-UUS|DN-LLINEN
N|NOM|SG|DA-UUS|DN-TON
N|NOM|SG|DA-UUS|DV-MATON
N|NOM|SG|DA-UUS|DV-VAINEN
N|NOM|SG|DN-TON|DA-UUS
N|NOM|SG|DV-ELE|DV-JA
N|NOM|SG|DV-ILE
N|NOM|SG|DV-ILE|DV-U
N|NOM|SG|DV-JA
N|NOM|SG|DV-JA|DN-TAR
N|NOM|SG|DV-JA|DV-TTA
N|NOM|SG|DV-JA|DV-UTU
N|NOM|SG|DV-MA
N|NOM|SG|DV-MINEN
N|NOM|SG|DV-MINEN|DV-U
N|NOM|SG|DV-NA
N|NOM|SG|DV-NEISUUS
N|NOM|SG|DV-NTA
N|NOM|SG|DV-NTAA|DV-MINEN
N|NOM|SG|DV-NTAA|DV-US
N|NOM|SG|DV-NTI
N|NOM|SG|DV-TTA
N|NOM|SG|DV-U
N|NOM|SG|DV-US
N|NOM|SG|DV-US|DV-TTA
N|NOM|SG|DV-UTU
N|NOM|SG|DV-UTU|DV-MINEN
N|NOM|SG|DV-U|DV-ELE
N|NOM|SG|DV-U|DV-ILE
N|NOM|SG|DV-U|DV-MINEN
N|NOM|SG|DV-U|DV-SKELE
N|NOM|SG|DV-U|DV-TTA
N|NOM|SG|PSS|PCP1|DA-UUS
N|NOM|SG|PSS|PCP2|DA-US
N|NOM|SG|TrunCo
N|NOM|SG|TrunCo|DA-US
N|NOM|SG|TrunCo|DV-JA
N|NOM|SG|TrunCo|DV-MINEN
N|NOM|SG|TrunCo|DV-NTA
N|NOM|SG|TrunCo|DV-NTI
N|NOM|SG|TrunCo|DV-U
N|NOM|SG|TrunCo|DV-US
N|NOM|SG|TrunCo|DV-US|DV-TTA
N|NOM|SG|hAn
N|NOM|SG|kAAn|DV-NTI
N|NOM|SG|kin
N|NOM|SG|st-arch
N|NOM|SG|st-cllq
N|NOM|SG|st-cllq|DV-MINEN
N|NOM|SG|st-cllq|TrunCo
N|NOM|SG|st-hi
N|NOM|SG|st-slang
N|NOM|SG|st-slang|DV-JA
N|PROP
N|PROP|ABE|SG
N|PROP|ABL|PL
N|PROP|ABL|PL|3
N|PROP|ABL|SG
N|PROP|ABL|SG|3
N|PROP|ADE|PL
N|PROP|ADE|SG
N|PROP|ALL|PL
N|PROP|ALL|SG
N|PROP|ALL|SG|DN-LAINEN
N|PROP|ELA|PL
N|PROP|ELA|SG
N|PROP|ELA|SG|DA-UUS|DN-LAINEN
N|PROP|ESS|SG
N|PROP|GEN|PL
N|PROP|GEN|SG
N|PROP|GEN|SG|DA-UUS|DN-LAINEN
N|PROP|GEN|SG|DN-LAINEN
N|PROP|ILL|PL
N|PROP|ILL|SG
N|PROP|ILL|SG|3
N|PROP|ILL|SG|3|hAn
N|PROP|INE|PL
N|PROP|INE|SG
N|PROP|INE|SG|kin
N|PROP|INS|PL
N|PROP|NOM|PL
N|PROP|NOM|PL|DN-LAINEN
N|PROP|NOM|SG
N|PROP|NOM|SG|1PL
N|PROP|NOM|SG|3
N|PROP|NOM|SG|DA-UUS|DN-LAINEN
N|PROP|NOM|SG|TrunCo
N|PROP|NOM|SG|kAAn
N|PROP|NOM|SG|kin
N|PROP|PTV|SG
N|PROP|PTV|SG|DN-LAINEN
N|PROP|TRA|SG|3
N|PTV|PL
N|PTV|PL|1PL
N|PTV|PL|1SG
N|PTV|PL|3
N|PTV|PL|3|DV-ELE
N|PTV|PL|3|DV-MA
N|PTV|PL|3|DV-MA|DV-TTA
N|PTV|PL|3|DV-U
N|PTV|PL|3|DV-US
N|PTV|PL|DA-US
N|PTV|PL|DA-UUS
N|PTV|PL|DA-UUS|DN-LLINEN
N|PTV|PL|DN-TON|DA-UUS
N|PTV|PL|DV-ILE
N|PTV|PL|DV-ILE|DV-U
N|PTV|PL|DV-JA
N|PTV|PL|DV-JA|DV-TTA
N|PTV|PL|DV-MA
N|PTV|PL|DV-MINEN
N|PTV|PL|DV-NTAA|DV-US
N|PTV|PL|DV-NTI
N|PTV|PL|DV-TTA
N|PTV|PL|DV-TTA|DV-U|DV-ELE
N|PTV|PL|DV-U
N|PTV|PL|DV-US
N|PTV|PL|DV-US|DV-TTA
N|PTV|PL|DV-U|DV-ELE
N|PTV|PL|DV-U|DV-ILE
N|PTV|PL|DV-U|DV-JA
N|PTV|PL|PSS|PCP1|DA-UUS
N|PTV|PL|TrunCo
N|PTV|PL|kin|DA-UUS
N|PTV|PL|st-cllq
N|PTV|PL|st-slang|DV-JA
N|PTV|SG
N|PTV|SG|1PL
N|PTV|SG|1SG
N|PTV|SG|1SG|DV-MA
N|PTV|SG|3
N|PTV|SG|3|ACT|PCP1|DA-UUS|DV-U
N|PTV|SG|3|DA-US
N|PTV|SG|3|DA-UUS|DN-LLINEN
N|PTV|SG|3|DV-ILE|DV-U
N|PTV|SG|3|DV-MA
N|PTV|SG|3|DV-MINEN
N|PTV|SG|3|DV-U
N|PTV|SG|3|TrunCo
N|PTV|SG|ACT|PCP1|DA-UUS
N|PTV|SG|DA-US
N|PTV|SG|DA-UUS
N|PTV|SG|DA-UUS|DN-INEN
N|PTV|SG|DA-UUS|DN-LLINEN
N|PTV|SG|DA-UUS|DV-MATON
N|PTV|SG|DA-UUS|DV-VAINEN
N|PTV|SG|DN-TON|DA-UUS
N|PTV|SG|DV-ELE
N|PTV|SG|DV-ELE|DV-MINEN
N|PTV|SG|DV-JA
N|PTV|SG|DV-JA|DV-TTA
N|PTV|SG|DV-MA
N|PTV|SG|DV-MINEN
N|PTV|SG|DV-NA
N|PTV|SG|DV-NTA
N|PTV|SG|DV-NTAA|DV-MINEN
N|PTV|SG|DV-NTAA|DV-US
N|PTV|SG|DV-NTI
N|PTV|SG|DV-TTA
N|PTV|SG|DV-TTA|DV-MINEN|DV-ELE
N|PTV|SG|DV-U
N|PTV|SG|DV-US
N|PTV|SG|DV-US|DV-TTA
N|PTV|SG|DV-UTU
N|PTV|SG|DV-UTU|DV-MINEN
N|PTV|SG|DV-U|DV-ELE
N|PTV|SG|DV-U|DV-MINEN
N|PTV|SG|DV-U|DV-NEISUUS
N|PTV|SG|DV-U|DV-SKELE
N|PTV|SG|PSS|PCP1|DA-UUS
N|PTV|SG|PSS|PCP2|DA-US
N|PTV|SG|TrunCo
N|PTV|SG|kin
N|PTV|SG|st-cllq
N|TRA|PL
N|TRA|PL|3
N|TRA|PL|DA-US
N|TRA|PL|DV-JA
N|TRA|PL|PSS|PCP1|DA-UUS
N|TRA|SG
N|TRA|SG|3
N|TRA|SG|3|DV-JA
N|TRA|SG|DA-US
N|TRA|SG|DA-UUS
N|TRA|SG|DA-UUS|DV-MATON
N|TRA|SG|DV-JA
N|TRA|SG|DV-MA
N|TRA|SG|DV-MINEN
N|TRA|SG|DV-NTA
N|TRA|SG|DV-NTAA|DV-MINEN
N|TRA|SG|DV-U
N|TRA|SG|DV-US
N|TRA|SG|DV-US|DV-TTA
N|TRA|SG|DV-U|DV-MINEN
N|TRA|SG|st-cllq
N|TRA|SG|st-cllq|DV-US
N|digit|ABL|SG
N|digit|ADE|PL
N|digit|ADE|SG
N|digit|ADE|SG|kin
N|digit|ALL|SG
N|digit|GEN|SG
N|digit|INE|SG
N|digit|NOM|SG
N|digit|PTV|PL|3
N|digit|PTV|SG
N|roman|GEN|SG
N|roman|INE|PL
N|roman|NOM|SG
POS|ABL|PL|ACT|PCP1
POS|ABL|SG|ACT|PCP1
POS|ABL|SG|ACT|PCP2
POS|ABL|SG|PSS|PCP2
POS|ADE|PL|ACT|PCP2
POS|ADE|PL|PSS|PCP1
POS|ADE|PL|PSS|PCP2
POS|ADE|SG|ACT|PCP1
POS|ADE|SG|ACT|PCP2
POS|ADE|SG|PSS|PCP1
POS|ADE|SG|PSS|PCP2
POS|ADE|SG|PSS|PCP2|DV-TTA
POS|ALL|PL|ACT|PCP1
POS|ALL|PL|ACT|PCP1|DV-U
POS|ALL|PL|ACT|PCP2
POS|ALL|PL|ACT|PCP2|DV-U
POS|ALL|SG|ACT|PCP1
POS|ALL|SG|ACT|PCP2
POS|ALL|SG|ACT|PCP2|DV-ELE
POS|ALL|SG|PSS|PCP1
POS|ALL|SG|PSS|PCP2
POS|CMT|ACT|PCP1
POS|ELA|PL|ACT|PCP1
POS|ELA|PL|ACT|PCP2
POS|ELA|PL|ACT|PCP2|DV-U
POS|ELA|PL|PSS|PCP2
POS|ELA|PL|PSS|PCP2|DV-TTA|DV-ELE
POS|ELA|SG|ACT|PCP1
POS|ELA|SG|ACT|PCP1|DV-U
POS|ELA|SG|ACT|PCP2
POS|ELA|SG|ACT|PCP2|DV-U
POS|ELA|SG|PSS|PCP1
POS|ELA|SG|PSS|PCP2
POS|ESS|PL|ACT|PCP1|DV-ILE|DV-TTA
POS|ESS|PL|ACT|PCP2
POS|ESS|PL|PSS|PCP2
POS|ESS|SG|ACT|PCP1
POS|ESS|SG|ACT|PCP2
POS|ESS|SG|ACT|PCP2|DV-UTU
POS|ESS|SG|PSS|PCP1
POS|ESS|SG|PSS|PCP2
POS|ESS|SG|PSS|PCP2|DV-ELE
POS|ESS|SG|PSS|PCP2|DV-ILE
POS|GEN|PL|ACT|PCP1
POS|GEN|PL|ACT|PCP2
POS|GEN|PL|ACT|PCP2|DV-U
POS|GEN|PL|PSS|PCP2
POS|GEN|PL|PSS|PCP2|DV-ILE
POS|GEN|PL|PSS|PCP2|DV-TTA|DV-ELE
POS|GEN|SG|ACT|PCP1
POS|GEN|SG|ACT|PCP1|DV-ELE
POS|GEN|SG|ACT|PCP1|DV-ILE
POS|GEN|SG|ACT|PCP1|DV-TTA
POS|GEN|SG|ACT|PCP1|DV-U
POS|GEN|SG|ACT|PCP1|DV-UTU
POS|GEN|SG|ACT|PCP2
POS|GEN|SG|ACT|PCP2|DV-ELE
POS|GEN|SG|ACT|PCP2|DV-NTAA
POS|GEN|SG|ACT|PCP2|DV-TTA
POS|GEN|SG|ACT|PCP2|DV-U
POS|GEN|SG|PSS|PCP1
POS|GEN|SG|PSS|PCP1|DV-TTA
POS|GEN|SG|PSS|PCP2
POS|GEN|SG|PSS|PCP2|DV-ILE
POS|ILL|PL|ACT|PCP1
POS|ILL|PL|PSS|PCP2
POS|ILL|SG|ACT|PCP1
POS|ILL|SG|ACT|PCP1|DV-U
POS|ILL|SG|ACT|PCP2
POS|ILL|SG|PSS|PCP1
POS|ILL|SG|PSS|PCP2
POS|INE|PL|ACT|PCP1
POS|INE|PL|ACT|PCP2
POS|INE|PL|ACT|PCP2|DV-U
POS|INE|PL|PSS|PCP1
POS|INE|PL|PSS|PCP2
POS|INE|SG|ACT|PCP1
POS|INE|SG|ACT|PCP1|DV-ILE
POS|INE|SG|ACT|PCP1|DV-U
POS|INE|SG|ACT|PCP2
POS|INE|SG|ACT|PCP2|DV-U
POS|INE|SG|PSS|PCP1
POS|INE|SG|PSS|PCP2
POS|NOM|PL|ACT|PCP1
POS|NOM|PL|ACT|PCP1|DV-TTA
POS|NOM|PL|ACT|PCP1|DV-U
POS|NOM|PL|ACT|PCP1|DV-UTU
POS|NOM|PL|ACT|PCP2
POS|NOM|PL|ACT|PCP2|DV-ELE
POS|NOM|PL|ACT|PCP2|DV-TTA
POS|NOM|PL|ACT|PCP2|DV-U
POS|NOM|PL|ACT|PCP2|DV-UTU
POS|NOM|PL|PSS|PCP1
POS|NOM|PL|PSS|PCP1|DV-TTA|DV-ELE
POS|NOM|PL|PSS|PCP2
POS|NOM|PL|PSS|PCP2|DV-TTA
POS|NOM|SG|1SG|ACT|PCP1
POS|NOM|SG|3|ACT|PCP1
POS|NOM|SG|3|ACT|PCP2
POS|NOM|SG|3|ACT|PCP2|DV-U
POS|NOM|SG|ACT|PCP1
POS|NOM|SG|ACT|PCP1|DV-ELE
POS|NOM|SG|ACT|PCP1|DV-TTA
POS|NOM|SG|ACT|PCP1|DV-U
POS|NOM|SG|ACT|PCP1|kin
POS|NOM|SG|ACT|PCP1|st-hi
POS|NOM|SG|ACT|PCP2
POS|NOM|SG|ACT|PCP2|DV-ELE
POS|NOM|SG|ACT|PCP2|DV-ILE
POS|NOM|SG|ACT|PCP2|DV-TTA
POS|NOM|SG|ACT|PCP2|DV-TTA|DV-ELE
POS|NOM|SG|ACT|PCP2|DV-U
POS|NOM|SG|ACT|PCP2|DV-UTU
POS|NOM|SG|ACT|PCP2|kin
POS|NOM|SG|ACT|PCP2|kin|DV-U
POS|NOM|SG|ACT|PCP2|st-cllq
POS|NOM|SG|PSS|PCP1
POS|NOM|SG|PSS|PCP1|DV-TTA
POS|NOM|SG|PSS|PCP2
POS|NOM|SG|PSS|PCP2|DV-ELE
POS|NOM|SG|PSS|PCP2|DV-ILE
POS|NOM|SG|PSS|PCP2|DV-TTA
POS|NOM|SG|PSS|PCP2|DV-TTA|DV-ELE
POS|NOM|SG|PSS|PCP2|DV-U
POS|NOM|SG|PSS|PCP2|st-cllq
POS|PTV|PL|ACT|PCP1
POS|PTV|PL|ACT|PCP2
POS|PTV|PL|ACT|PCP2|DV-U
POS|PTV|PL|PSS|PCP1
POS|PTV|PL|PSS|PCP2
POS|PTV|SG|3|PSS|PCP2
POS|PTV|SG|3|PSS|PCP2|DV-U
POS|PTV|SG|ACT|PCP1
POS|PTV|SG|ACT|PCP1|DV-ILE
POS|PTV|SG|ACT|PCP1|DV-TTA
POS|PTV|SG|ACT|PCP1|DV-UTU
POS|PTV|SG|ACT|PCP2
POS|PTV|SG|ACT|PCP2|DV-U
POS|PTV|SG|ACT|PCP2|DV-UTU
POS|PTV|SG|PSS|PCP1
POS|PTV|SG|PSS|PCP2
POS|PTV|SG|PSS|PCP2|DV-NTAA
POS|PTV|SG|PSS|PCP2|DV-TTA
POS|PTV|SG|PSS|PCP2|DV-U
POS|PTV|SG|PSS|PCP2|DV-UTU
POS|TRA|PL|ACT|PCP1
POS|TRA|PL|ACT|PCP1|DV-TTA
POS|TRA|PL|PSS|PCP1
POS|TRA|PL|PSS|PCP1|DV-TTA
POS|TRA|PL|PSS|PCP2
POS|TRA|SG|3|PSS|PCP1
POS|TRA|SG|3|PSS|PCP2
POS|TRA|SG|ACT|PCP1
POS|TRA|SG|ACT|PCP2
POS|TRA|SG|ACT|PCP2|DV-U
POS|TRA|SG|PSS|PCP1
POS|TRA|SG|PSS|PCP2
PP
PP|3
PP|ADE|3
PP|FORGN
PP|kin
PRON|DEM|ABL|SG
PRON|DEM|ADE|PL
PRON|DEM|ADE|PL|kin
PRON|DEM|ADE|SG
PRON|DEM|ADE|SG|kin
PRON|DEM|ALL|PL
PRON|DEM|ALL|SG
PRON|DEM|ALL|SG|kin
PRON|DEM|ELA|PL
PRON|DEM|ELA|SG
PRON|DEM|ELA|SG|kin
PRON|DEM|ESS|SG
PRON|DEM|ESS|SG|kAAn
PRON|DEM|ESS|SG|kin
PRON|DEM|GEN|PL
PRON|DEM|GEN|SG
PRON|DEM|GEN|SG|hAn
PRON|DEM|ILL|PL
PRON|DEM|ILL|SG
PRON|DEM|INE|PL
PRON|DEM|INE|PL|kin
PRON|DEM|INE|SG
PRON|DEM|INE|SG|pA
PRON|DEM|NOM|PL
PRON|DEM|NOM|SG
PRON|DEM|NOM|SG|hAn
PRON|DEM|NOM|SG|kin
PRON|DEM|PTV|PL
PRON|DEM|PTV|PL|kin
PRON|DEM|PTV|SG
PRON|DEM|TRA|SG
PRON|INTG|NOM|SG
PRON|INTG|NOM|SG|pA
PRON|INTG|NOM|SG|s
PRON|INTG|PTV|s
PRON|INTG|TRA|kOhAn
PRON|PERS|ABL|PL
PRON|PERS|ABL|SG
PRON|PERS|ACC|PL
PRON|PERS|ACC|SG
PRON|PERS|ADE|PL
PRON|PERS|ADE|SG
PRON|PERS|ALL|PL
PRON|PERS|ALL|SG
PRON|PERS|ELA|PL
PRON|PERS|ELA|SG
PRON|PERS|GEN|PL
PRON|PERS|GEN|SG
PRON|PERS|GEN|SG|kin
PRON|PERS|ILL|PL
PRON|PERS|ILL|SG
PRON|PERS|INE|SG
PRON|PERS|NOM|PL
PRON|PERS|NOM|PL|kin
PRON|PERS|NOM|SG
PRON|PERS|NOM|SG|kin
PRON|PERS|NOM|SG|pA
PRON|PERS|PTV|PL
PRON|PERS|PTV|SG
PRON|Q|ABL|PL
PRON|Q|ABL|PL|3
PRON|Q|ABL|SG
PRON|Q|ADE|PL
PRON|Q|ADE|SG
PRON|Q|ADE|SG|kin
PRON|Q|ALL|PL
PRON|Q|ALL|PL|3
PRON|Q|ALL|SG
PRON|Q|ELA|PL
PRON|Q|ELA|PL|3
PRON|Q|ELA|SG
PRON|Q|ESS|PL
PRON|Q|ESS|SG
PRON|Q|GEN|PL
PRON|Q|GEN|PL|3
PRON|Q|GEN|PL|kin
PRON|Q|GEN|SG
PRON|Q|ILL|PL
PRON|Q|ILL|PL|3
PRON|Q|ILL|SG
PRON|Q|ILL|SG|kin
PRON|Q|INE|PL
PRON|Q|INE|PL|kin
PRON|Q|INE|SG
PRON|Q|INS|PL
PRON|Q|NOM
PRON|Q|NOM|PL
PRON|Q|NOM|SG
PRON|Q|NOM|SG|kin
PRON|Q|NOM|hAn
PRON|Q|PTV|PL
PRON|Q|PTV|PL|1PL
PRON|Q|PTV|PL|3
PRON|Q|PTV|PL|kin
PRON|Q|PTV|SG
PRON|Q|PTV|SG|kAAn
PRON|Q|TRA|SG
PRON|REFL/Q|ABL|SG|3
PRON|REFL/Q|ADE|SG|1SG
PRON|REFL/Q|ADE|SG|3
PRON|REFL/Q|ALL|SG|1PL
PRON|REFL/Q|ALL|SG|1SG
PRON|REFL/Q|ALL|SG|3
PRON|REFL/Q|ALL|SG|kin
PRON|REFL/Q|ELA|SG|1PL
PRON|REFL/Q|ELA|SG|3
PRON|REFL/Q|ESS|SG|3
PRON|REFL/Q|ILL|SG|1PL
PRON|REFL/Q|ILL|SG|3
PRON|REFL/Q|INE|SG|3
PRON|REFL/Q|NOM|SG
PRON|REFL/Q|NOM|SG|1SG
PRON|REFL/Q|NOM|SG|3
PRON|REFL/Q|NOM|SG|kin
PRON|REFL/Q|PTV|SG|1PL
PRON|REFL/Q|PTV|SG|1SG
PRON|REFL/Q|PTV|SG|3
PRON|REL|ADE|SG
PRON|REL|ALL|SG
PRON|REL|ELA
PRON|REL|ELA|SG
PRON|REL|GEN
PRON|REL|GEN|PL
PRON|REL|GEN|SG
PRON|REL|ILL
PRON|REL|ILL|PL
PRON|REL|ILL|SG
PRON|REL|INE
PRON|REL|INE|SG
PRON|REL|NOM|PL
PRON|REL|NOM|SG
PRON|REL|PTV
PRON|REL|PTV|PL
PRON|REL|PTV|SG
PRON|REL|TRA
PSP
PSP|3
PSP|ABL|1SG
PSP|ADE|1SG
PSP|ALL|1SG
PSP|ALL|3
PSP|ILL|1PL
PSP|ILL|1SG
PSP|ILL|3
PSP|INE
PUNCT
PUNCT|DASH
PUNCT|EMDASH
PUNCT|ENDASH
PUNCT|QUOTE
V|3|PAST|ACT|TEMP
V|3|PAST|ACT|TEMP|DV-U
V|ABE|1PL|INF3
V|ABE|INF3
V|ABE|INF3|DV-ILE
V|ABE|INF3|kAAn
V|ADE|INF3
V|ADE|INF3|DV-ELE
V|ADE|INF3|DV-ELE|DV-TTA
V|ADE|INF3|DV-TTA
V|ADE|INF3|DV-U
V|COND|ACT|NEG
V|COND|ACT|NEG|DV-TTA
V|COND|ACT|NEG|DV-U
V|COND|ACT|NEG|kAAn
V|COND|ACT|NEG|kAAn|DV-TTA
V|COND|ACT|PL1
V|COND|ACT|PL1|DV-TTA
V|COND|ACT|PL1|DV-U
V|COND|ACT|PL1|kO
V|COND|ACT|PL3
V|COND|ACT|PL3|kin
V|COND|ACT|SG1
V|COND|ACT|SG1|kin
V|COND|ACT|SG3
V|COND|ACT|SG3|DV-ELE
V|COND|ACT|SG3|DV-U
V|COND|ACT|SG3|kAAn
V|COND|ACT|SG3|kO
V|COND|PSS|NEG
V|COND|PSS|PE4
V|COND|PSS|PE4|kin
V|COP|ADE|INF3
V|COP|COND|ACT|NEG
V|COP|COND|ACT|PL1
V|COP|COND|ACT|PL3
V|COP|COND|ACT|SG1
V|COP|COND|ACT|SG3
V|COP|COND|ACT|SG3|kO
V|COP|COND|ACT|SG3|kOhAn
V|COP|COND|ACT|SG3|kin
V|COP|ILL|INF3
V|COP|IMPV|ACT|SG2
V|COP|INE|1SG|ACT|INF2
V|COP|INE|ACT|INF2
V|COP|INE|INF3
V|COP|INF1|LAT
V|COP|MAN|ACT|INF2
V|COP|PAST|ACT|PL1
V|COP|PAST|ACT|PL3
V|COP|PAST|ACT|PL3|kO
V|COP|PAST|ACT|PL3|kin
V|COP|PAST|ACT|SG1
V|COP|PAST|ACT|SG3
V|COP|PAST|ACT|SG3|kO
V|COP|PAST|ACT|SG3|kin
V|COP|PAST|PSS|NEG
V|COP|PL|PAST|ACT|NEG
V|COP|POTN|ACT|SG3
V|COP|PRES|ACT|NEG
V|COP|PRES|ACT|NEG|kAAn
V|COP|PRES|ACT|NEG|kin
V|COP|PRES|ACT|PL1
V|COP|PRES|ACT|PL3
V|COP|PRES|ACT|PL3|kO
V|COP|PRES|ACT|PL3|kin
V|COP|PRES|ACT|SG1
V|COP|PRES|ACT|SG1|kO
V|COP|PRES|ACT|SG1|kin
V|COP|PRES|ACT|SG2
V|COP|PRES|ACT|SG3
V|COP|PRES|ACT|SG3|hAn
V|COP|PRES|ACT|SG3|kAAn
V|COP|PRES|ACT|SG3|kO
V|COP|PRES|ACT|SG3|kin
V|COP|PRES|PSS|PE4
V|COP|SG|PAST|ACT|NEG
V|COP|SG|PAST|ACT|NEG|kAAn
V|COP|TRA|3|INF1
V|ELA|INF3
V|ILL|INF3
V|ILL|INF3|DV-ELE
V|ILL|INF3|DV-ILE
V|ILL|INF3|DV-NTAA
V|ILL|INF3|DV-SKELE
V|ILL|INF3|DV-TTA
V|ILL|INF3|DV-U
V|ILL|INF3|st-vrnc
V|IMPV|ACT|PL1
V|IMPV|ACT|PL2
V|IMPV|ACT|SG2
V|IMPV|ACT|SG2|DV-TTA
V|IMPV|ACT|SG2|kin
V|IMPV|ACT|SG3|DV-TTA
V|INE|1PL|ACT|INF2
V|INE|1SG|ACT|INF2
V|INE|3|ACT|INF2
V|INE|3|ACT|INF2|DV-ELE
V|INE|ACT|INF2
V|INE|ACT|INF2|DV-TTA
V|INE|ACT|INF2|DV-U
V|INE|INF3
V|INE|INF3|DV-ELE
V|INE|INF3|DV-U
V|INE|PSS|INF2
V|INE|PSS|INF2|DV-NTAA
V|INF1|LAT
V|INF1|LAT|DV-ELE
V|INF1|LAT|DV-ELE|DV-TTA
V|INF1|LAT|DV-ILE
V|INF1|LAT|DV-NTAA
V|INF1|LAT|DV-NTAA|DV-ELE
V|INF1|LAT|DV-TTA
V|INF1|LAT|DV-U
V|INF1|LAT|DV-UTU
V|INF1|kAAn|LAT
V|INF1|kin|LAT
V|INF1|st-cllq|LAT
V|INF1|st-cllq|LAT|DV-ILE
V|INS|ACT|INF2
V|INS|ACT|INF2|DV-ELE
V|INS|ACT|INF2|DV-ILE
V|INS|ACT|INF2|DV-U
V|PAST|ACT|PL1
V|PAST|ACT|PL1|DV-ELE
V|PAST|ACT|PL1|st-cllq
V|PAST|ACT|PL2|st-cllq
V|PAST|ACT|PL3
V|PAST|ACT|PL3|DV-ELE
V|PAST|ACT|PL3|DV-ILE
V|PAST|ACT|PL3|DV-NTAA
V|PAST|ACT|PL3|DV-SKELE
V|PAST|ACT|PL3|DV-TTA
V|PAST|ACT|PL3|DV-U
V|PAST|ACT|PL3|DV-UTU
V|PAST|ACT|PL3|kO
V|PAST|ACT|PL3|kin
V|PAST|ACT|SG1
V|PAST|ACT|SG1|DV-ELE
V|PAST|ACT|SG1|DV-ILE
V|PAST|ACT|SG1|DV-TTA
V|PAST|ACT|SG1|DV-U
V|PAST|ACT|SG1|kin
V|PAST|ACT|SG1|kin|DV-ELE
V|PAST|ACT|SG1|kin|DV-ILE
V|PAST|ACT|SG2
V|PAST|ACT|SG3
V|PAST|ACT|SG3|DV-ELE
V|PAST|ACT|SG3|DV-ILE
V|PAST|ACT|SG3|DV-NTAA
V|PAST|ACT|SG3|DV-TTA
V|PAST|ACT|SG3|DV-TTA|DV-ELE
V|PAST|ACT|SG3|DV-U
V|PAST|ACT|SG3|DV-UTU
V|PAST|ACT|SG3|hAn
V|PAST|ACT|SG3|kAAn
V|PAST|ACT|SG3|kin
V|PAST|ACT|SG3|st-cllq
V|PAST|ACT|TEMP
V|PAST|ACT|TEMP|DV-TTA
V|PAST|PSS|NEG
V|PAST|PSS|NEG|DV-TTA
V|PAST|PSS|PE4
V|PAST|PSS|PE4|DV-ELE
V|PAST|PSS|PE4|DV-ILE
V|PAST|PSS|PE4|DV-NTAA
V|PAST|PSS|PE4|DV-TTA
V|PAST|PSS|PE4|DV-TTA|DV-ELE
V|PAST|PSS|PE4|DV-U
V|PAST|PSS|PE4|kO
V|PAST|PSS|PE4|kin
V|PAST|PSS|REF
V|PL1|NEGV
V|PL3|NEGV
V|PL3|NEGV|kO
V|PL|PAST|ACT|NEG
V|PL|PAST|ACT|NEG|DV-U
V|POTN|ACT|PL3
V|POTN|ACT|SG1
V|POTN|PSS|PE4
V|PRES|ACT|NEG
V|PRES|ACT|NEG|DV-NTAA
V|PRES|ACT|NEG|DV-TTA
V|PRES|ACT|NEG|DV-U
V|PRES|ACT|NEG|kAAn
V|PRES|ACT|PL1
V|PRES|ACT|PL1|DV-U
V|PRES|ACT|PL1|kO
V|PRES|ACT|PL1|kin
V|PRES|ACT|PL2
V|PRES|ACT|PL2|hAn
V|PRES|ACT|PL2|kO
V|PRES|ACT|PL3
V|PRES|ACT|PL3|DV-ELE
V|PRES|ACT|PL3|DV-TTA
V|PRES|ACT|PL3|DV-U
V|PRES|ACT|PL3|DV-UTU
V|PRES|ACT|PL3|kO
V|PRES|ACT|PL3|kO|DV-U
V|PRES|ACT|PL3|st-cllq
V|PRES|ACT|SG1
V|PRES|ACT|SG1|DV-ELE
V|PRES|ACT|SG1|DV-TTA
V|PRES|ACT|SG1|kO
V|PRES|ACT|SG1|pA
V|PRES|ACT|SG1|st-cllq
V|PRES|ACT|SG2
V|PRES|ACT|SG3
V|PRES|ACT|SG3|DV-ELE
V|PRES|ACT|SG3|DV-ILE
V|PRES|ACT|SG3|DV-ILE|DV-TTA
V|PRES|ACT|SG3|DV-NTAA
V|PRES|ACT|SG3|DV-TTA
V|PRES|ACT|SG3|DV-U
V|PRES|ACT|SG3|DV-UTU
V|PRES|ACT|SG3|hAn
V|PRES|ACT|SG3|kAAn
V|PRES|ACT|SG3|kO
V|PRES|ACT|SG3|kin
V|PRES|ACT|SG3|kin|DV-NTAA
V|PRES|ACT|SG3|st-cllq
V|PRES|PSS|NEG
V|PRES|PSS|NEG|DV-ELE
V|PRES|PSS|NEG|DV-ILE
V|PRES|PSS|PE4
V|PRES|PSS|PE4|DV-ELE
V|PRES|PSS|PE4|DV-ILE
V|PRES|PSS|PE4|DV-TTA
V|PRES|PSS|PE4|DV-U
V|PRES|PSS|PE4|kin
V|PRES|PSS|PE4|st-cllq
V|PRES|PSS|REF
V|SG1|NEGV
V|SG2|NEGV
V|SG3|NEGV
V|SG3|NEGV|kO
V|SG|PAST|ACT|NEG
V|SG|PAST|ACT|NEG|DV-ELE
V|SG|PAST|ACT|NEG|DV-ILE
V|SG|PAST|ACT|NEG|DV-NTAA
V|SG|PAST|ACT|NEG|DV-TTA
V|SG|PAST|ACT|NEG|DV-U
V|SG|PAST|ACT|NEG|kAAn
V|TRA|3|INF1
V|TRA|3|INF1|DV-TTA
end_of_list
    ;
    my @list = split(/\r?\n/, $list);
    return \@list;
}



1;

=head1 SYNOPSIS

  use Lingua::Interset::Tagset::FI::Turku;
  my $driver = Lingua::Interset::Tagset::FI::Turku->new();
  my $fs = $driver->decode('N|NOM|SG');

or

  use Lingua::Interset qw(decode);
  my $fs = decode('fi::turku', 'N|NOM|SG');

=head1 DESCRIPTION

Interset driver for the Finnish tagset from the Turku Dependency Treebank.
Tag is a sequence of features separated by vertical bars.
There are just the feature values, not attribute-value pairs.

=head1 SEE ALSO

L<Lingua::Interset>,
L<Lingua::Interset::Tagset>,
L<Lingua::Interset::FeatureStructure>

=cut
