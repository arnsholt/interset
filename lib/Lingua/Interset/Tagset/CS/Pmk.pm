# ABSTRACT: Driver for the Czech tagset of the Prague Spoken Corpus (Pražský mluvený korpus).
# Copyright © 2009, 2010, 2014 Dan Zeman <zeman@ufal.mff.cuni.cz>

package Lingua::Interset::Tagset::CS::Pmk;
use strict;
use warnings;
# VERSION: generated by DZP::OurPkgVersion

use utf8;
use open ':utf8';
use namespace::autoclean;
use Moose;
extends 'Lingua::Interset::Tagset';



has 'atoms' => ( isa => 'HashRef', is => 'ro', builder => '_create_atoms', lazy => 1 );



#------------------------------------------------------------------------------
# Creates atomic drivers for 11 surface features.
#------------------------------------------------------------------------------
sub _create_atoms
{
    my $self = shift;
    my %atoms;
    # GENDER ####################
    # Encoding of gender varies depending on context (part of speech).
    ###!!! Map differing number codes to one set first.
    #my %map =
    #(
    #    '1' => {'1'=>'M', '2'=>'I', '3'=>'F', '4'=>'N', '9'=>'X'},
    #    '2' => {'1'=>'M', '2'=>'I', '3'=>'F', '4'=>'N', '9'=>'X'},
    #    '3' => {'1'=>'M', '2'=>'I', '3'=>'F', '4'=>'N', '5'=>'B', '9'=>'X'},
    #    '4' => {'1'=>'M', '2'=>'I', '3'=>'F', '4'=>'N', '5'=>'B', '9'=>'X'},
    #    'P' => {'1'=>'M', '2'=>'I', '3'=>'F', '4'=>'N', '5'=>'X'}
    #);
    $atoms{gender} = $self->create_atom
    (
        'surfeature' => 'gender',
        'decode_map' =>
        {
            'M' => ['gender' => 'masc', 'animateness' => 'anim'],
            'I' => ['gender' => 'masc', 'animateness' => 'inan'],
            'F' => ['gender' => 'fem'],
            'N' => ['gender' => 'neut'],
            # Some pronouns ('já', 'ty') do not distinguish grammatical gender and have this value.
            # Note that this value ('B') is not identical to the general "unknown gender" ('X').
            'B' => ['other' => 'bezrodé'],
            'X' => []
        },
        'encode_map' =>

            { 'gender' => { 'masc' => { 'animateness' => { 'inan' => 'I',
                                                           '@'    => 'M' }},
                            'fem'  => 'F',
                            'neut' => 'N',
                            '@'    => { 'other' => { 'bezrodé' => 'B',
                                                     '@'       => 'X' }}}}
    );
    # NUMBER ####################
    # Encoding of number varies depending on context (part of speech).
    ###!!! Map differing number codes to one set first.
    #my %map =
    #(
    #    '1' => {'1'=>'S', '2'=>'P', '3'=>'T', '4'=>'D', '5'=>'C', '9'=>'X'},
    #    '2' => {'1'=>'S', '2'=>'P', '3'=>'D', '4'=>'C', '9'=>'X'},
    #    '3' => {'1'=>'S', '2'=>'P', '3'=>'D', '4'=>'V', '9'=>'X'},
    #    '4' => {'1'=>'S', '2'=>'P', '3'=>'D', '4'=>'C', '9'=>'X'},
    #    'P' => {'1'=>'S', '2'=>'P', '3'=>'T', '4'=>'X'}
    #);
    $atoms{number} = $self->create_atom
    (
        'surfeature' => 'number',
        'decode_map' =>
        {
            'S' => ['number' => 'sing'],
            'P' => ['number' => 'plu'],
            'T' => ['number' => 'ptan'],
            'D' => ['number' => 'dual'],
            'C' => ['number' => 'coll'],
            # "Vykání": using plural to address a single person in a polite manner.
            'V' => ['number' => 'plu', 'politeness' => 'pol'],
            'X' => []
        },
        'encode_map' =>

            { 'number' => { 'sing' => 'S',
                            'dual' => 'D',
                            'plu'  => { 'politeness' => { 'pol' => 'V',
                                                          '@'   => 'P' }},
                            'ptan' => 'T',
                            'coll' => 'C',
                            '@'    => 'X' }}
    );
    # GENDER AND NUMBER OF PARTICIPLES ####################
    $atoms{participle_gender_number} = $self->create_atom
    (
        'surfeature' => 'participle_gender_number',
        'decode_map' =>
        {
            '1' => ['gender' => 'masc', 'animateness' => 'anim', 'number' => 'sing'],
            '2' => ['gender' => 'masc', 'animateness' => 'inan', 'number' => 'sing'],
            '3' => ['gender' => 'fem', 'number' => 'sing'],
            '4' => ['gender' => 'neut', 'number' => 'sing'],
            '5' => ['gender' => 'masc', 'animateness' => 'anim', 'number' => 'plu'],
            '6' => ['gender' => 'masc', 'animateness' => 'inan', 'number' => 'plu'],
            '7' => ['gender' => 'fem', 'number' => 'plu'],
            '8' => ['gender' => 'neut', 'number' => 'plu'],
            # - -> neurčuje se / not specified => empty value
            # 9 => nelze určit / cannot specify => empty value
            # If this is not a participle number may still be specified but will be encoded elsewhere; gender will be '-'.
            # It can also happen that person+number is 3rd+singular (5=3) and gender+number is unknown (9=9). Example: "nařízíno"
            '9' => ['other' => 'gender=9'],
            '-' => ['other' => 'gender=-']
        },
        'encode_map' =>

            { 'other' => { 'gender=9' => '9',
                           'gender=-' => '-',
                           '@'        => { 'number' => { 'sing' => { 'gender' => { 'masc' => { 'animateness' => { 'inan' => '2',
                                                                                                                  '@'    => '1' }},
                                                                                   'fem'  => '3',
                                                                                   '@'    => '4' }},
                                                         'plu'  => { 'gender' => { 'masc' => { 'animateness' => { 'inan' => '6',
                                                                                                                  '@'    => '5' }},
                                                                                   'fem'  => '7',
                                                                                   '@'    => '8' }},
                                                         '@'    => '9' }}}}
    );
    # PERSON AND NUMBER OF VERBS ####################
    $atoms{person_number} = $self->create_atom
    (
        'surfeature' => 'person_number',
        'decode_map' =>
        {
            '1' => ['person' => '1', 'number' => 'sing'],
            '2' => ['person' => '2', 'number' => 'sing'],
            '3' => ['person' => '3', 'number' => 'sing'],
            '4' => ['person' => '1', 'number' => 'plu'],
            '5' => ['person' => '2', 'number' => 'plu'],
            '6' => ['person' => '3', 'number' => 'plu'],
            '7' => ['verbform' => 'inf', 'voice' => 'act'],
            '8' => ['verbform' => 'inf', 'voice' => 'pass'],
            # "non-personal" (neosobní) usage of the third person
            # "říkalo se", "říká se": subject "ono" (it) is a filler that does not denote any semantic object
            '9' => ['person' => '3', 'number' => 'sing', 'other' => 'nonpers'],
            # non-personal plural
            # only two occurrences in the whole corpus: "řikali", "hlásaj"
            '0' => ['person' => '3', 'number' => 'plu', 'other' => 'nonpers'],
            # - -> neurčuje se / not specified => empty value
            # can conflict with participle gender+number
            '-' => ['other' => 'person=-']
        },
        'encode_map' =>

            { 'other' => { 'person=-' => '-',
                           '@'        => { 'verbform' => { 'inf' => { 'voice' => { 'pass' => '8',
                                                                                   '@'    => '7' }},
                                                           '@'   => { 'number' => { 'plu'  => { 'person' => { '1' => '4',
                                                                                                              '2' => '5',
                                                                                                              '@' => { 'other' => { 'nonpers' => '0',
                                                                                                                                    '@'       => '6' }}}},
                                                                                    'sing' => { 'person' => { '1' => '1',
                                                                                                              '2' => '2',
                                                                                                              '@' => { 'other' => { 'nonpers' => '9',
                                                                                                                                    '@'       => '3' }}}},
                                                                                    '@'    => '-' }}}}}}
    );
    # CASE ####################
    $atoms{case} = $self->create_simple_atom
    (
        'intfeature' => 'case',
        'simple_decode_map' =>
        {
            '1' => 'nom',
            '2' => 'gen',
            '3' => 'dat',
            '4' => 'acc',
            '5' => 'voc',
            '6' => 'loc',
            '7' => 'ins'
            ###!!!
            # valency-based case of prepositions: "other" = 8
            # case of nouns, adjectives etc.: "cannot specify or indeclinable" = 9
        }
    );
    # COUNTED CASE ####################
    # (pád počítané jmenné fráze)
    $atoms{counted_case} = $self->create_simple_atom
    (
        'intfeature' => 'other',
        'simple_decode_map' =>
        {
            '1' => 'ccase=nom',
            '2' => 'ccase=gen',
            '3' => 'ccase=dat',
            '4' => 'ccase=acc',
            '5' => 'ccase=voc',
            '6' => 'ccase=loc',
            '7' => 'ccase=ins'
        },
        'encode_default' => '9'
    );
    # DEGREE OF COMPARISON ####################
    $atoms{degree} = $self->create_simple_atom
    (
        'intfeature' => 'degree',
        'simple_decode_map' =>
        {
            '-' => 'pos',
            '2' => 'comp',
            '3' => 'sup'
        }
    );
    # MOOD, TENSE AND VOICE ####################
    $atoms{mood_tense_voice} = $self->create_atom
    (
        'surfeature' => 'mood_tense_voice',
        'decode_map' =>
        {
            '1' => ['verbform' => 'fin', 'mood' => 'ind', 'tense' => 'pres', 'voice' => 'act'],  # dělá
            '2' => ['verbform' => 'fin', 'mood' => 'ind', 'tense' => 'pres', 'voice' => 'pass'], # je dělán
            '3' => ['verbform' => 'fin', 'mood' => 'cnd', 'tense' => 'pres', 'voice' => 'act'],  # dělal by
            '4' => ['verbform' => 'fin', 'mood' => 'cnd', 'tense' => 'pres', 'voice' => 'pass'], # byl by dělán
            '5' => ['verbform' => 'fin', 'mood' => 'ind', 'tense' => 'past', 'voice' => 'act'],  # dělal
            '6' => ['verbform' => 'fin', 'mood' => 'ind', 'tense' => 'past', 'voice' => 'pass'], # byl dělán
            '7' => ['verbform' => 'fin', 'mood' => 'cnd', 'tense' => 'past', 'voice' => 'act'],  # byl by dělal
            '8' => ['verbform' => 'fin', 'mood' => 'cnd', 'tense' => 'past', 'voice' => 'pass'], # byl by byl dělán
            '9' => ['verbform' => 'fin', 'mood' => 'ind', 'tense' => 'fut',  'voice' => 'act'],  # bude dělat
            '0' => ['verbform' => 'fin', 'mood' => 'ind', 'tense' => 'fut',  'voice' => 'pass']  # bude dělán
        },
        'encode_map' =>

            { 'verbform' => { 'trans' => '-',
                              '@'     => { 'mood' => { 'cnd' => { 'tense' => { 'past' => { 'voice' => { 'pass' => '8',
                                                                                                        '@'    => '7' }},
                                                                               '@'    => { 'voice' => { 'pass' => '4',
                                                                                                        '@'    => '3' }}}},
                                                       '@'   => { 'tense' => { 'fut'  => { 'voice' => { 'pass' => '0',
                                                                                                        '@'    => '9' }},
                                                                               'past' => { 'voice' => { 'pass' => '6',
                                                                                                        '@'    => '5' }},
                                                                               'pres' => { 'voice' => { 'pass' => '2',
                                                                                                        '@'    => '1' }},
                                                                               '@'    => '-' }}}}}}
    );
    # IMPERATIVE OR NON-FINITE VERB FORM ####################
    $atoms{nonfinite_verb_form} = $self->create_atom
    (
        'surfeature' => 'nonfinite_verb_form',
        'decode_map' =>
        {
            '1' => ['verbform' => 'fin', 'mood' => 'imp', 'voice' => 'act'],      # dělej
            '2' => ['verbform' => 'fin', 'mood' => 'imp', 'voice' => 'pass'],     # buď dělán
            '3' => ['verbform' => 'part', 'voice' => 'pass'],                     # dělán
            '4' => ['verbform' => 'trans', 'tense' => 'pres', 'voice' => 'act'],  # dělaje
            '5' => ['verbform' => 'trans', 'tense' => 'pres', 'voice' => 'pass'], # jsa dělán
            '6' => ['verbform' => 'trans', 'tense' => 'past', 'voice' => 'act'],  # udělav
            '7' => ['verbform' => 'trans', 'tense' => 'past', 'voice' => 'pass']  # byv udělán
        },
        'encode_map' =>

            { 'mood' => { 'imp' => { 'voice' => { 'pass' => '2',
                                                  '@'    => '1' }},
                          '@'   => { 'verbform' => { 'trans' => { 'tense' => { 'past' => { 'voice' => { 'pass' => '7',
                                                                                                        '@'    => '6' }},
                                                                               '@'    => { 'voice' => { 'pass' => '5',
                                                                                                        '@'    => '4' }}}},
                                                     'part'  => { 'voice' => { 'pass' => '3',
                                                                               '@'    => '-' }},
                                                     '@'     => '-' }}}}
    );
    # NEGATIVENESS ####################
    $atoms{negativeness} = $self->create_simple_atom
    (
        'intfeature' => 'negativeness',
        'simple_decode_map' =>
        {
            '1' => 'pos',
            '2' => 'neg'
        }
    );
    # STYLE ####################
    $atoms{style} = $self->create_simple_atom
    (
        'intfeature' => 'style',
        'simple_decode_map' =>
        {
            # základní, mluvený, neformální
            '1' => 'coll',
            # neutrální, mluvený, psaný
            '2' => 'norm',
            # knižní
            '3' => 'form',
            # vulgární
            '4' => 'vulg'
        },
        'encode_default' => '2'
    );
    # NOUN TYPE ####################
    # Noun types in PMK mostly reflect how (from what part of speech) the noun was derived.
    $atoms{noun_type} = $self->create_atom
    (
        'surfeature' => 'noun_type',
        'decode_map' =>
        {
            # běžné: konstruktér, rodina, auto
            '1' => [],
            # adjektivní: ženská, vedoucí, nadřízenej
            '2' => ['other' => 'nountype=adj'],
            # zájmenné: naši, vaši
            '3' => ['other' => 'nountype=pron'],
            # číslovkové: dvojka, devítka, šestsettřináctka
            '4' => ['other' => 'nountype=num'],
            # slovesné: postavení, bití, chování
            '5' => ['other' => 'nountype=verb'],
            # slovesné zvratné: věnování se; note: the tag is assigned to "věnování" while "se" has an empty tag
            '6' => ['other' => 'nountype=verb', 'reflex' => 'reflex'],
            # zkratkové slovo: ó dé eska; note: the tag is assigned to "ó" while "dé" and "eska" have empty tags
            # This is not the same as an abbreviated noun.
            '7' => ['other' => 'nountype=abbr'],
            # nesklonné: apartmá, interview, gró
            '9' => ['other' => 'nountype=indecl']
        },
        'encode_map' =>

            { 'reflex' => { 'reflex' => '6',
                            '@'      => { 'other' => { 'nountype=adj'    => '2',
                                                       'nountype=pron'   => '3',
                                                       'nountype=num'    => '4',
                                                       'nountype=verb'   => '5',
                                                       'nountype=abbr'   => '7',
                                                       'nountype=indecl' => '9',
                                                       '@'               => '1' }}}}
    );
    # ADJECTIVE TYPE ####################
    $atoms{adjective_type} = $self->create_atom
    (
        'surfeature' => 'adjective_type',
        'decode_map' =>
        {
            # nespecifické: jiný, prázdnej, řádová
            '1' => [],
            # slovesné: ovlivněný, skličující, vyspělý
            '2' => ['other' => 'adjtype=verb'],
            # přivlastňovací: Martinův, tátový, Klárčiny
            '3' => ['poss' => 'poss']
        },
        'encode_map' =>

            { 'poss' => { 'poss' => '3',
                          '@'    => { 'other' => { 'adjtype=verb' => '2',
                                                   '@'            => '1' }}}}
    );
    # ADJECTIVE SUBTYPE ####################
    $atoms{adjective_subtype} = $self->create_atom
    (
        'surfeature' => 'adjective_subtype',
        'decode_map' =>
        {
            # departicipiální prosté: přeloženej, shořelej, naloženej
            '1' => ['verbform' => 'part'],
            # zvratné: blížícím se, se živícim, drolící se
            '2' => ['reflex' => 'reflex'],
            # jmenná forma sg neutra: (chybná anotace???) prioritní, vytížený, obligátní
            '3' => ['variant' => 'short', 'gender' => 'neut', 'number' => 'sing'],
            # jmenná forma jiná: schopni, ochotni, unaven
            '4' => ['variant' => 'short'],
            # zvratná jmenná forma: si vědom
            '5' => ['variant' => 'short', 'reflex' => 'reflex'],
            # ostatní: chybnejch, normální, hovorový
            '0' => []
        },
        'encode_map' =>

            { 'variant' => { 'short' => { 'reflex' => { 'reflex' => '5',
                                                        '@' => { 'gender' => { 'neut' => { 'number' => { 'sing' => '3',
                                                                                                         '@'    => '4' }},
                                                                               '@'    => '4' }}}},
                             '@'     => { 'reflex' => { 'reflex' => '2',
                                                        '@'      => { 'verbform' => { 'part' => '1',
                                                                                      '@'    => '0' }}}}}}
    );
    # PRONOUN TYPE ####################
    $atoms{pronoun_type} = $self->create_atom
    (
        'surfeature' => 'pronoun_type',
        'decode_map' =>
        {
            # osobní: já, ty, on, ona, ono, my, vy, oni, ony
            '1' => ['prontype' => 'prs'],
            # neurčité: všem, všechno, nějakou, ňáká, něco, některé, každý
            '2' => ['prontype' => 'ind'],
            # osobní zvratné: sebe, sobě, se, si, sebou
            '3' => ['prontype' => 'prs', 'reflex' => 'reflex'],
            # ukazovací: to, takový, tu, ten, tamto, té, tech
            '4' => ['prontype' => 'dem'],
            # tázací: co, jaký, kdo, čim, komu, která
            '5' => ['prontype' => 'int'],
            # vztažné: což, který, která, čeho, čehož, jakým
            '6' => ['prontype' => 'rel'],
            # záporné: žádná, nic, žádný, žádnej, nikdo, nikomu
            '7' => ['prontype' => 'neg'],
            # přivlastňovací: můj, tvůj, jeho, její, náš, váš, jejich
            '8' => ['prontype' => 'prs', 'poss' => 'poss'],
            # přivlastňovací zvratné: své, svýmu, svými, svoje
            '9' => ['prontype' => 'prs', 'poss' => 'poss', 'reflex' => 'reflex'],
            # víceslovné: nějaký takový, takový ňáký, nějaký ty, takovym tim
            '0' => ['prontype' => 'ind', 'other' => 'prontype=víceslovné'],
            # víceslovné vztažné: to co, "to, co", něco co, "ten, kdo"
            '-' => ['prontype' => 'rel', 'other' => 'prontype=víceslovné']
        },
        'encode_map' =>

            { 'prontype' => { 'prs' => { 'poss' => { 'poss' => { 'reflex' => { 'reflex' => '9',
                                                                               '@'      => '8' }},
                                                     '@'    => { 'reflex' => { 'reflex' => '3',
                                                                               '@'      => '1' }}}},
                              'ind' => { 'other' => { 'prontype=víceslovné' => '0',
                                                      '@'                   => '2' }},
                              'dem' => '4',
                              'int' => '5',
                              'rel' => { 'other' => { 'prontype=víceslovné' => '-',
                                                      '@'                   => '6' }},
                              'neg' => '7' }}
    );
    # NUMERAL TYPE ####################
    $atoms{numeral_type} = $self->create_atom
    (
        'surfeature' => 'numeral_type',
        'decode_map' =>
        {
            # základní: jeden, pět, jedný, deset, vosum
            '1' => ['pos' => 'num', 'numtype' => 'card'],
            # řadová: druhej, prvnímu, poprvé, sedumdesátým
            '2' => ['pos' => 'adj|adv', 'numtype' => 'ord'],
            # druhová: oboje, troje, vosmery, jedny, dvojího
            '3' => ['pos' => 'adj', 'numtype' => 'gen'],
            # násobná: dvakrát, mockrát, jednou, mnohokrát, čtyřikrát
            '4' => ['pos' => 'adv', 'numtype' => 'mult'],
            # neurčitá: několik, kolik, pár, tolik, několikrát
            '5' => ['prontype' => 'ind'],
            # víceslovná základní: dvě stě, tři tisíce, deset tisíc, sedum set, čtyři sta
            '6' => ['pos' => 'num', 'numtype' => 'card', 'other' => 'numtype=víceslovná'],
            # víceslovná řadová: sedumdesátym druhym, šedesátej vosmej, osmdesátém devátém
            '7' => ['pos' => 'adj', 'numtype' => 'ord', 'other' => 'numtype=víceslovná'],
            # víceslovná druhová
            '8' => ['pos' => 'adj', 'numtype' => 'gen', 'other' => 'numtype=víceslovná'],
            # víceslovná násobná
            '9' => ['pos' => 'adv', 'numtype' => 'mult', 'other' => 'numtype=víceslovná'],
            # víceslovná neurčitá: "tolik, kolik", "tolik (ženskejch), kolik"
            '0' => ['prontype' => 'ind', 'other' => 'numtype=víceslovná']
        },
        'encode_map' =>

            { 'other' => { 'numtype=víceslovná' => { 'prontype' => { 'ind' => '0',
                                                                     '@'   => { 'numtype' => { 'mult' => '9',
                                                                                               'gen'  => '8',
                                                                                               'ord'  => '7',
                                                                                               '@'    => '6' }}}},
                           '@'                  => { 'prontype' => { 'ind' => '5',
                                                                     '@'   => { 'numtype' => { 'mult' => '4',
                                                                                               'gen'  => '3',
                                                                                               'ord'  => '2',
                                                                                               '@'    => '1' }}}}}}
    );
    # ASPECT ####################
    $atoms{aspect} = $self->create_simple_atom
    (
        'intfeature' => 'aspect',
        'simple_decode_map' =>
        {
            # imperfektivum: neměl, myslim, je, má, existují
            '1' => 'imp',
            # perfektivum: uživí, udělat, zlepšit, rozvíst, vynechat
            '2' => 'perf',
            # obouvidové: stačilo, absolvovali, algoritmizovat, analyzujou, nedokáží
            '9' => 'imp|perf'
        }
    );
    # ADVERB TYPE ####################
    $atoms{adverb_type} = $self->create_atom
    (
        'surfeature' => 'adverb_type',
        'decode_map' =>
        {
            # běžné nespecifické: materiálně, pak, finančně, moc, hrozně
            '1' => [],
            # predikativum: nelze, smutno, blízko, zima, horko
            '2' => ['advtype' => 'mod|sta'],
            # zájmenné nespojovací: tady, jak, tak, tehdy, teď, vždycky, kde, vodkaď, tam, tu, vodtaď, potom, přitom, někde
            # In fact, this category contains several types of pronominal adverbs: indefinite, demonstrative, interrogative etc.
            # The main point is to set prontype to anything non-empty here to distinguish them from adjectival adverbs.
            '3' => ['prontype' => 'ind'],
            # spojovací výraz jednoslovný: proč, kdy, kde, kam
            '4' => ['prontype' => 'rel'],
            # spojovací výraz víceslovný: "tak, jak", "tak, že", "tak, aby", "tak jako", "tak (velký), aby"
            # Typically, this is a pair of a demonstrative adverb ("tak") and a relative adverb ("jak") or conjunction ("že").
            # The tag appears at the demonstrative adverb while the rest has empty tag.
            '5' => ['prontype' => 'dem']
        },
        'encode_map' =>

            { 'advtype' => { 'mod|sta' => '2',
                             '@'       => { 'prontype' => { 'ind' => '3',
                                                            'rel' => '4',
                                                            'dem' => '5',
                                                            '@'   => '1' }}}}
    );
    # PREPOSITION TYPE ####################
    $atoms{preposition_type} = $self->create_atom
    (
        'surfeature' => 'preposition_type',
        'decode_map' =>
        {
            # běžná vlastní: v, vod, na, z, se
            '1' => [],
            # nevlastní homonymní: vokolo, vedle, včetně, pomocí, během
            '2' => ['other' => 'preptype=nevlastní'],
            # víceslovná: z pohledů, na základě, na začátku, za účelem, v rámci
            '3' => ['other' => 'preptype=víceslovná']
        },
        'encode_map' =>

            { 'other' => { 'preptype=nevlastní'  => '2',
                           'preptype=víceslovná' => '3',
                           '@'                   => '1' }}
    );
    # CONJUNCTION TYPE ####################
    $atoms{conjunction_type} = $self->create_atom
    (
        'surfeature' => 'conjunction_type',
        'decode_map' =>
        {
            # souřadící jednoslovná: a, ale, nebo, jenomže, či
            '1' => ['conjtype' => 'coor'],
            # podřadící jednoslovná: jesli, protože, že, jako, než
            '2' => ['conjtype' => 'sub'],
            # souřadící víceslovná: buďto-anebo, i-i, ať už-anebo, buď-nebo, ať-nebo
            '3' => ['conjtype' => 'coor', 'other' => 'multitoken'],
            # podřadící víceslovná: jesli-tak, "na to, že", i když, i dyž, proto-že
            '4' => ['conjtype' => 'sub', 'other' => 'multitoken'],
            # jiná jednoslovná: v korpusu se nevyskytuje
            '5' => ['other' => 'conjtype=other'],
            # jiná víceslovná: v korpusu se nevyskytuje
            '6' => ['other' => 'conjtype=other-multitoken'],
            # nelze určit: buď, jak, sice, jednak, buďto
            '9' => []
        },
        'encode_map' =>

            { 'other' => { 'conjtype=other'            => '5',
                           'conjtype=other-multitoken' => '6',
                           'multitoken'                => { 'conjtype' => { 'sub'  => '4',
                                                                            '@'    => '3' }},
                           '@'                         => { 'conjtype' => { 'sub'  => '2',
                                                                            'coor' => '1',
                                                                            '@'    => '9' }}}}
    );
    # INTERJECTION TYPE ####################
    $atoms{interjection_type} = $self->create_atom
    (
        'surfeature' => 'interjection_type',
        'decode_map' =>
        {
            # běžné původní: hm, nó, no jo, jé, aha
            '1' => [],
            # substantivní: škoda, čoveče, mami, bóže, hovno
            '2' => ['other' => 'intertype=noun'],
            # adjektivní: hotovo, bezva
            '3' => ['other' => 'intertype=adj'],
            # zájmenné: jo, ne, jó, né
            '4' => ['other' => 'intertype=pron'],
            # slovesné: neboj, sím, podivejte, hele, počkej
            '5' => ['other' => 'intertype=verb'],
            # adverbiální: vážně, jistě, takle, depak, rozhodně
            '6' => ['other' => 'intertype=adv'],
            # jiné: jaktože, pardón, zaplať pámbu, ahój, vůbec
            '7' => ['other' => 'intertype=other'],
            # víceslovné = frazém: v korpusu se nevyskytlo, resp. možná se vyskytlo a bylo označkováno jako frazém
            '0' => ['other' => 'intertype=multitoken']
        },
        'encode_map' =>

            { 'other' => { 'intertype=noun'       => '2',
                           'intertype=adj'        => '3',
                           'intertype=pron'       => '4',
                           'intertype=verb'       => '5',
                           'intertype=adv'        => '6',
                           'intertype=other'      => '7',
                           'intertype=multitoken' => '0',
                           '@'                    => '1' }}
    );
    # PARTICLE TYPE ####################
    $atoms{particle_type} = $self->create_atom
    (
        'surfeature' => 'particle_type',
        'decode_map' =>
        {
            # vlastní nehomonymní: asi, právě, také, spíš, přece
            '1' => [],
            # adverbiální: prostě, hnedle, naopak, třeba, tak
            '2' => ['other' => 'parttype=adv'],
            # spojkové: teda, ani, jako, až, ale
            '3' => ['other' => 'parttype=conj'],
            # jiné: nó, zrovna, jo, vlastně, to
            '4' => ['other' => 'parttype=other'],
            # víceslovné nevětné: no tak, tak ňák, že jo, nebo co, jen tak
            '5' => ['other' => 'parttype=multitoken]
        },
        'encode_map' =>

            { 'other' => { 'parttype=adv'        => '2',
                           'parttype=conj'       => '3',
                           'parttype=other'      => '4',
                           'parttype=multitoken' => '5',
                           '@'                   => '1' }}
    );
    # IDIOM TYPE ####################
    ###!!! Perhaps we could reverse the priorities. Idiom type would be (mostly) decoded
    ###!!! as $fs->{pos}, and $fs->{other} would record that this is an idiom.
    $atoms{idiom_type} = $self->create_atom
    (
        'surfeature' => 'idiom_type',
        'decode_map' =>
        {
            # verbální: vyprdnout se na to, mít dojem, mít smysl, měli rádi, jít vzorem
            '1' => ['other' => 'idiomtype=verb'],
            # substantivní: hlava rodiny, žebříček hodnot, říjnový revoluci, diamantovou svatbou, českej člověk
            '2' => ['other' => 'idiomtype=noun'],
            # adjektivní: ten a ten, každym druhym, toho a toho, jako takovou, výše postavených
            '3' => ['other' => 'idiomtype=adj'],
            # adverbiální: u nás, v naší době, tak ňák, za chvíli, podle mýho názoru
            '4' => ['other' => 'idiomtype=adv'],
            # propoziční včetně interjekčních: to stálo vodříkání, to snad není možný, je to tím že, největší štěstí je
            '5' => ['other' => 'idiomtype=prop'],
            # jiné: samy za sebe, všechno možný, jak který, všech možnejch, jednoho vůči druhýmu
            '6' => ['other' => 'idiomtype=other']
        },
        'encode_map' =>

            { 'other' => { 'idiomtype=verb' => '1',
                           'idiomtype=noun' => '2',
                           'idiomtype=adj'  => '3',
                           'idiomtype=adv'  => '4',
                           'idiomtype=prop' => '5',
                           '@'              => '6' }}
    );
    # OTHER REAL TYPE ####################
    # (skutečný druh)
    $atoms{other_real_type} = $self->create_atom
    (
        'surfeature' => 'other_real_type',
        'decode_map' =>
        {
            # citátové výrazy cizojazyčné, zvláště víceslovné: go, skinheads, non plus ultra, madame, cleaner polish
            'C' => ['foreign' => 'foreign'],
            # zkratky neslovní: ý, í, x, ČKD, EEG
            'Z' => ['abbr' => 'abbr'],
            # propria: Kunratickou, Hrádek, Mirek, Roháčích, Vinnetou
            'P' => ['pos' => 'noun', 'nountype' => 'prop']
        },
        'encode_map' =>

            { 'foreign' => { 'foreign' => 'C',
                             '@'       => { 'abbr' => { 'abbr' => 'Z',
                                                        '@'    => { 'nountype' => { 'prop' => 'P' }}}}}}
    );
    # PROPER NOUN TYPE ####################
    $atoms{proper_noun_type} = $self->create_atom
    (
        'surfeature' => 'proper_noun_type',
        'decode_map' =>
        {
            # jednoslovné: Vinnetou, Rybanu, Tujunga, Brně, Praze
            '1' => [],
            # víceslovné: Zahradním Městě, u Andělů, Staroměstského náměstí, Český Štenberk, Lucinka Tomíčková
            '2' => ['other' => 'multitoken']
        },
        'encode_map' =>

            { 'other' => { 'multitoken' => '2',
                           '@'          => '1' }}
    );
    # NOUN CLASS ####################
    $atoms{noun_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'noun_class',
        'decode_map' =>
        {
            # osoba: holčička, maminku, blondýnka, bytost, rošťanda
            '1' => ['other' => {'nounclass' => 'person'}],
            # živočich: zvířata, vůl, had, krávám, psy
            '2' => ['other' => {'nounclass' => 'animal'}],
            # konkrétum: hlavou, vodu, nohy, auto, metru
            '3' => ['other' => {'nounclass' => 'concrete'}],
            # abstraktum: pocit, vzdělání, mezera, mládí, války
            '4' => ['other' => {'nounclass' => 'abstract'}],
            # jiné nejasné: sídlišti, chatu, továrnách, pracovně, ateliér
            '9' => ['other' => {'nounclass' => 'unclear'}]
        },
        'encode_map' =>

            { 'other/nounclass' => { 'person'   => '1',
                                     'animal'   => '2',
                                     'concrete' => '3',
                                     'abstract' => '4',
                                     '@'        => '9' }}
    );
    # ADJECTIVE CLASS ####################
    $atoms{adjective_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'adjective_class',
        'decode_map' =>
        {
            # deskriptivní: těsné, prožitej, vykonaný, starší, mladších
            '1' => ['other' => {'adjclass' => 'descr'}],
            # deskriptivní propriální: Zděnkový, Patriková, Romanovou, náchodskýho, silvánského
            '2' => ['other' => {'adjclass' => 'prop'}],
            # evaluativní: blbej, nepříjemnej, hroznej, neuvěřitelný, šílený
            '3' => ['other' => {'adjclass' => 'eval'}],
            # intenzifikační: kratší, krátkou, delší, rychlý, malej, velká, nejhlubšího
            '4' => ['other' => {'adjclass' => 'intens'}],
            # restriktivní: celý, další, stejnej, specifický, určitý, jinýho
            '5' => ['other' => {'adjclass' => 'restr'}],
            # nelze určit: zato, myšlená, danej
            '9' => []
        },
        'encode_map' =>

            { 'other/adjclass' => { 'descr'  => '1',
                                    'prop'   => '2',
                                    'eval'   => '3',
                                    'intens' => '4',
                                    'restr'  => '5',
                                    '@'      => '9' }}
    );
    # ADVERB CLASS ####################
    $atoms{adverb_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'adverb_class',
        'decode_map' =>
        {
            # neurčuje se: takle, jak, tak, takhle, nějak
            '-' => [],
            # deskriptivní: spolu, prakticky, individuálně, citově, přesně
            '1' => ['other' => {'advclass' => 'descr'}],
            # evaluativní: strašně, různě, nespravedlivě, pořádně, prakticky
            '2' => ['other' => {'advclass' => 'eval'}],
            # intenzifikační: malinko, uplně, totálně, hodně, daleko
            '3' => ['other' => {'advclass' => 'intens'}],
            # restriktivní: většinou, jenom, podobně, stejně, výhradně
            '4' => ['other' => {'advclass' => 'restr'}],
            # deskriptivní časoprostorové: pořád, domů, dneska, tady, někam
            '5' => ['other' => {'advclass' => 'timespace'}],
            # nelze určit: no occurrence in corpus
            '6' => ['other' => {'advclass' => 'unknown'}]
        },
        'encode_map' =>

            { 'other/advclass' => { 'descr'     => '1',
                                    'eval'      => '2',
                                    'intens'    => '3',
                                    'restr'     => '4',
                                    'timespace' => '5',
                                    'unknown'   => '6',
                                    '@'         => '-' }}
    );
    # PREPOSITION CLASS ####################
    $atoms{preposition_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'preposition_class',
        'decode_map' =>
        {
            # lokální: u, do, na, v, po
            '1' => ['advtype' => 'loc'],
            # temporální: před, po, v, vod, do
            '2' => ['advtype' => 'tim'],
            # jiná: vo, kvůli, ke, kromě, s
            '3' => []
        },
        'encode_map' =>

            { 'advtype' => { 'loc' => '1',
                             'tim' => '2',
                             '@'   => '3' }}
    );
    # CONJUNCTION CLASS ####################
    $atoms{conjunction_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'conjunction_class',
        'decode_map' =>
        {
            # kombinační (sluč./stup./vyluč./odpor.): a, ale, nebo, jenomže, ať
            '1' => ['other' => {'conjclass' => 'comb'}],
            # specifikační (obsah./kval./účin./účel.): aby, že, jesli
            '2' => ['other' => {'conjclass' => 'spec'}],
            # závislostní (kauz./důsl./podmín./příp./výjim.): pokuď, když, protože, takže, prže
            '3' => ['other' => {'conjclass' => 'dep'}],
            # časoprostorová: jakmile, než, co, jak, dyž
            '4' => ['other' => {'conjclass' => 'timespace'}],
            # jiná (podob./srov./způs./zřet.): než, jako
            '5' => ['other' => {'conjclass' => 'comp'}]
        },
        'encode_map' =>

            { 'other/conjclass' => { 'spec'      => '2',
                                     'dep'       => '3',
                                     'timespace' => '4',
                                     'comp'      => '5',
                                     '@'         => '1' }}
    );
    # INTERJECTION CLASS ####################
    $atoms{interjection_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'interjection_class',
        'decode_map' =>
        {
            # faktuální: ee, ne, hm, á, eh
            '1' => ['other' => {'interclass' => 'fac'}],
            # voluntativní: no, jo, jasně, pozor, nene
            '2' => ['other' => {'interclass' => 'vol'}],
            # emocionální: sakra, jé, bóže, bezva, hrůza
            '3' => ['other' => {'interclass' => 'emo'}],
            # kontaktové: neboj, podivejte, na, hele, počkej
            '4' => ['other' => {'interclass' => 'con'}],
            # onomatopoické: hhh, checheche, cha, chachacha
            '5' => ['other' => {'interclass' => 'ono'}],
            # voluntativní kontaktové: vole
            '6' => ['other' => {'interclass' => 'volcon'}],
            # voluntativní emocionální: jaktože, ty, ále, chá, šlus
            '7' => ['other' => {'interclass' => 'volemo'}],
            # voluntativní onomatopoické: šup
            '8' => ['other' => {'interclass' => 'volono'}],
            # emocionální kontaktové: ano
            '9' => ['other' => {'interclass' => 'emocon'}],
            # jiné: no occurrence in corpus
            '0' => []
        },
        'encode_map' =>

            { 'other/interclass' => { 'fac'    => '1',
                                      'vol'    => '2',
                                      'emo'    => '3',
                                      'con'    => '4',
                                      'ono'    => '5',
                                      'volcon' => '6',
                                      'volemo' => '7',
                                      'volono' => '8',
                                      'emocon' => '9',
                                      '@'      => '0' }}
    );
    # PARTICLE CLASS ####################
    $atoms{particle_class} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'particle_class',
        'decode_map' =>
        {
            # faktuální: tak, teda, asi, jako, řikám
            '1' => ['other' => {'partclass' => 'fact'}],
            # faktuální evaluativní: přitom, stejně, ovšem, potom, prakticky
            '2' => ['other' => {'partclass' => 'eval'}],
            # faktuální intenzifikační: i, specielně, hlavně, aspoň, už
            '3' => ['other' => {'partclass' => 'intens'}],
            # voluntativní: řekněme
            '4' => ['other' => {'partclass' => 'vol'}],
            # voluntativní evaluativní: třeba
            '5' => ['other' => {'partclass' => 'voleval'}],
            # expresivní (+eval./intenz.): no, taky, tak
            '6' => ['other' => {'partclass' => 'expr'}],
            # emocionální (eval./intenz.): bohužel, normálně, eště, akorát, vyloženě
            '7' => ['other' => {'partclass' => 'emo'}],
            # faktuální expresivní (+eval.): prostě, nakonec, vono, ne, jenom
            '8' => ['other' => {'partclass' => 'factexpr'}],
            # jiné (kombinace): teprv, nó, no, jo, dejme tomu
            '9' => []
        },
        'encode_map' =>

            { 'other/partclass' => { 'fact'     => '1',
                                     'eval'     => '2',
                                     'intens'   => '3',
                                     'vol'      => '4',
                                     'voleval'  => '5',
                                     'expr'     => '6',
                                     'emo'      => '7',
                                     'factexpr' => '8',
                                     '@'        => '9' }}
    );
    # VALENCY ####################
    # Note that valency, as it seems to be defined by the corpus annotation, does
    # not distinguish obligatory arguments from optional adjuncts. It simply
    # denotes the type of the dependent node in the particular sentence. It is thus
    # a property of the word in context, rather than of the lexical unit.
    # Valency codes differ for different parts of speech, thus we have different
    # atoms here, indexed by the characters that encode part of speech (e.g. 1
    # is noun).
    # NOUN VALENCY ####################
    $atoms{valency1} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'noun_valency',
        'decode_map' =>
        {
            # bez valence: zařazení, ohodnocení, vzdělání, věc, lidi
            '0' => [],
            # s bezpředložkovým pádem: fůra, května, rok, revizi, zdroje
            '1' => ['other' => {'valency' => 'npr'}],
            # s předložkou: díru, kamna, smlouva, subdodavatele, modernizace
            '2' => ['other' => {'valency' => 'pre'}],
            # se spojovacím výrazem (včetně relativ): práci, lazar, člověk, dlaždičky, mapy
            '3' => ['other' => {'valency' => 'con'}],
            # s infinitivem: možnost, příležitost, čas, rozdíl, snaha
            '4' => ['other' => {'valency' => 'inf'}],
            # s adverbiem: hodin (denně), životem (předtim), starost (navíc), moc (shora), prací (doma)
            '5' => ['other' => {'valency' => 'adv'}],
            # se dvěma bezpředložkovými pády: stanice (metra Dejvická), přetížení (dětí učivem), věnování se (rodičů dětem)
            '6' => ['other' => {'valency' => 'npr+npr'}],
            # s bezpředložkovým a předložkovým pádem: kontakt (dětí s vostatníma), výchovu (dětí v rodině), vztah (dítěte k rodině)
            '7' => ['other' => {'valency' => 'npr+pre'}],
            # s bezpředložkovým pádem a spojkou: spolčení (jeden proti druhému, aby), podmínky (k tomu, aby), mládí (dítěte, kdy)
            '8' => ['other' => {'valency' => 'npr+con'}],
            # jiné a vícečetné: příklad (, kdy), pracovník (, jako je ..., kterej ...), záruka (, že)
            '9' => ['other' => {'valency' => 'oth'}]
        }
    );
    # ADJECTIVE VALENCY ####################
    $atoms{valency2} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'adjective_valency',
        'decode_map' =>
        {
            # bez valence v atributu: vysoká, šeredný, mladí, naprostou, nezkušený
            '0' => ['other' => {'synpos' => 'attr'}],
            # bez valence v predikátu: dobrý, solidní, zlí, vobtížný, schopný
            '1' => ['other' => {'synpos' => 'pred'}],
            # s pádem bez předložky v predikátu: vytvořený (závodem), vychovávaná (třicátníky), plný (jich), adekvátní (tomu)
            '2' => ['other' => {'valency' => 'npr'}],
            # s předložkovým pádem v predikátu: spokojený (v práci), nevšímaví (ke všemu), spokojená (s prostředim)
            '3' => ['other' => {'valency' => 'pre'}],
            # se spojkou: rádi (že), přesvědčená (že), hodnější (než), posuzovanej (jako), vyšší (než)
            '4' => ['other' => {'valency' => 'con'}],
            # s infinitivem: nutný (vykonávat), možný (měnit), povolený (řikat), schopnej (říct), zvyklý (bejt)
            '5' => ['other' => {'valency' => 'inf'}],
            # jiné nebo neurčitelné: otevřený, nemyslitelné, nového, nastudovaného, připravený
            '8' => ['other' => {'valency' => 'oth'}]
        }
    );
    # PRONOUN VALENCY ####################
    $atoms{valency3} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'pronoun_valency',
        'decode_map' =>
        {
            # bez valence: sám, tom, my, všechno, jim
            '0' => [],
            # s bezpředložkovým pádem: tudle (otázku) (???), naše (společnost) (???), některý (ženský) (???)
            '1' => ['other' => {'valency' => 'npr'}],
            # s předložkovým pádem: sám (vod sebe), každej (z nás), málokterý (z rodičů), málokdo (z nich), někoho (nad hrobem)
            '2' => ['other' => {'valency' => 'pre'}],
            # s podřadící spojkou: tom (jesi), tom (kolik), takový (jak), toho (na jaký)
            '3' => ['other' => {'valency' => 'con'}],
            # jiné: co, který, ten (že), čem, to (vo čem)
            '4' => ['other' => {'valency' => 'oth'}]
        }
    );
    # NUMERAL VALENCY ####################
    $atoms{valency4} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'numeral_valency',
        'decode_map' =>
        {
            # bez valence samostatná: tolik, druhejm, jednou, vobojí, jedno
            '0' => [],
            # s bezpředložkovým pádem: vosum (hodin), dva (buřty), tři (krajíce), jedenáct (let), čtyřiceti (letech)
            '1' => ['other' => {'valency' => 'npr'}],
            # s předložkou: jedním (z důvodů), jednou (za čtyři roky), dvě (z možností), jeden (z kořenů), čtvrt (na devět)
            '2' => ['other' => {'valency' => 'pre'}],
            # jiná: jedenáct (večer), jednou (tak velkej), (těch) devět (co jsme), pět (který), tří (v Praze)
            '3' => ['other' => {'valency' => 'oth'}]
        }
    );
    # VALENCY OF VERBS AND VERBAL IDIOMS ####################
    $atoms{valency5} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'verb_valency',
        'decode_map' =>
        {
            # nerealizovaná subjektová valence, zřejmě hlavně u infinitivů: vzdělávat se, dejchat, nehýřit, rozšířit, stihnout
            '1'  => [],
            # nesubjektová valence s akuzativem
            # jen akuzativ: dělat (tohleto), stihnout (to), mít (čas), vystudovat (školu), přijímat (procento)
            '2-' => ['other' => {'valency' => 'acc'}],
            # a genitiv: vodpovědět (bez přípravy na votázku), vymazat (to z třídní knihy), ušetřit (na auto z platu)
            '21' => ['other' => {'valency' => 'acc+gen'}],
            # a instrumentál: dělat (něco s tim), dosáhnout (něco s nima), vyto (to před náma), získat (prostředky jinými formami)
            '22' => ['other' => {'valency' => 'acc+ins'}],
            # a lokativ: vychovaj (lidi v tom), říct (todleto vo mně), postavit (manželství na základech), mluvit (vo tom hodinu)
            '23' => ['other' => {'valency' => 'acc+loc'}],
            # a akuzativ: vést (dialog přes třetí osobu), máš (to samozřejmý), svádět (to na bolševiky), nabalovat (ty na kterej)
            '24' => ['other' => {'valency' => 'acc+acc'}],
            # a dativ: věnovat (tomu čas), vysvětlit (to jim), přidat (někomu stovku), ubrat (herci stovku), hnát (lidi k tomu)
            '25' => ['other' => {'valency' => 'acc+dat'}],
            # a adverbiále: udělat (cokoli kůli penězům), vyruš (policajta v sobotu), polapit (ho za vobojek), představit si (ženu tam)
            '26' => ['other' => {'valency' => 'acc+adv'}],
            # a infinitiv: nenapadne (mě kouřit), nechat (děti vystudovat), baví (mladý poslouchat), nechat (se popíchat)
            '27' => ['other' => {'valency' => 'acc+inf'}],
            # a spojka: rozvíjet (je jako), věřit (v to, že), postarat se (vo to, aby), nekouká se (na to, aby)
            '28' => ['other' => {'valency' => 'acc+con'}],
            # a další 2 pády: dělat (něco vopravdu) (???); no other occurrences
            '29' => ['other' => {'valency' => 'acc+2'}],
            # jiné smíšené/trojmístné: dodělat (to částečně, než), sladit (si všechno barevně, jak chceš)
            '20' => ['other' => {'valency' => 'acc+oth'}],
            # nesubjektová valence s neakuzativem
            # genitiv: ubývá (lásky), jít (do svazku), vodtrhnout se (vod většiny), nezbláznit se (do shonu), nadít se (pomoci)
            '31' => ['other' => {'valency' => 'gen'}],
            # instrumentál: vrtět (ocasem), udělat se (vedoucím), rozptylovat (činností), zabývat se (situací)
            '32' => ['other' => {'valency' => 'ins'}],
            # lokativ: záleží (na lidech), podílet se (na výchově), rozhodnout se (o tom), vydělávat (na tom)
            '33' => ['other' => {'valency' => 'loc'}],
            # dativ: vadilo by (mně), přirovnat (k tomu), došlo (k rovnoprávnosti), pomoct (jí)
            '34' => ['other' => {'valency' => 'dat'}],
            # genitiv a neakuzativ: usuzovat (z toho, že), oprostit (se vod všeho), bylo (vod předmětů až po stáje)
            '35' => ['other' => {'valency' => 'gen+nac'}],
            # instrumentál a neakuzativ: učit se (s dětma do školy), mluvit (s nima vo věcech), plýtvat (nehospodárně čimkoliv)
            '36' => ['other' => {'valency' => 'ins+nac'}],
            # lokativ a neakuzativ: píše se (vo tom v novinách), mluvit (vo tom víc), omezit (se v něčem)
            '37' => ['other' => {'valency' => 'loc+nac'}],
            # dativ a neakuzativ: věnovat se (těmto cele), mluví se (mně blbě), nelíbilo se (tobě na Slapech)
            '38' => ['other' => {'valency' => 'dat+nac'}],
            # nominativ včetně adjektiv: řídit (sama), bejt (podmínka), bejt (vohodnocená), bejt (hrdá)
            '39' => ['other' => {'valency' => 'nom-nsb'}],
            # jiné smíšené/trojmístné: bejt (mně šedesát), vyrovnat se (způsobem sami ze sebou s tim)
            '30' => ['other' => {'valency' => 'oth+nac'}],
            # jiná nesubjektová valence
            # adverbiále: zařadit (tim způsobem), zařadit se (někam), použít (v životě), žít (v úctě), žilo se (jak)
            '41' => ['other' => {'valency' => 'adv'}],
            # infinitiv: mělo se (vyučovat), nechat si (brát), umět (pomoct), chodit (si zatrénovat)
            '42' => ['other' => {'valency' => 'inf'}],
            # spojka: hodilo by se (abys), zdá se (že), představ si (že), uvažovat (že), myslelo se (že)
            '43' => ['other' => {'valency' => 'con'}],
            # dvě adverbiále: chodí se (denně do práce), sednout si (zvlášť do místnosti), nepršelo (tady na Silvestra)
            '44' => ['other' => {'valency' => 'adv+adv'}],
            # adverbiále a neakuzativ: vyprávělo se (o tom léta), pracovalo se (mi líp), hrát (nám tam)
            '45' => ['other' => {'valency' => 'adv+nac'}],
            # adverbiále a infinitiv: jezdit (tam nakupovat), snažit se (tam vydat), nejde (už potom přitáhnout)
            '46' => ['other' => {'valency' => 'adv+inf'}],
            # adverbiále a spojka: přečíst si (na pytliku, z čeho to je), uvádí se (nakonec, že), porovnávat (tolik, že)
            '47' => ['other' => {'valency' => 'adv+con'}],
            # infinitiv a neakuzativ: nepodařilo se (mu naplnit), bát se (strašně mluvit), podařilo se (mi přivýst)
            '48' => ['other' => {'valency' => 'inf+nac'}],
            # spojka a neakuzativ: myslej (tim, že), dokázat (si, že), říct (o okolí, že), vočekávat (vod ženy, že)
            '49' => ['other' => {'valency' => 'con+nac'}],
            # jiné: říct (spousta), říct (já dělám ...) [unquoted direct speech]
            '40' => ['other' => {'valency' => 'oth'}],
            # subjektová valence bez nesubjektové
            '5'  => ['other' => {'valency' => 'nom'}],
            # subjektová a nesubjektová s akuzativem
            # jen akuzativ
            '6-' => ['other' => {'valency' => 'nom+acc'}],
            # a genitiv
            '61' => ['other' => {'valency' => 'nom+acc+gen'}],
            # a instrumentál
            '62' => ['other' => {'valency' => 'nom+acc+ins'}],
            # a lokativ
            '63' => ['other' => {'valency' => 'nom+acc+loc'}],
            # a akuzativ
            '64' => ['other' => {'valency' => 'nom+acc+acc'}],
            # a dativ
            '65' => ['other' => {'valency' => 'nom+acc+dat'}],
            # a adverbiále (včetně předložek)
            '66' => ['other' => {'valency' => 'nom+acc+adv'}],
            # a infinitiv
            '67' => ['other' => {'valency' => 'nom+acc+inf'}],
            # a spojka
            '68' => ['other' => {'valency' => 'nom+acc+con'}],
            # a další 2 pády
            '69' => ['other' => {'valency' => 'nom+acc+2'}],
            # jiná (smíšená/trojmístná)
            '60' => ['other' => {'valency' => 'nom+acc+oth'}],
            # subjektová a nesubjektová s neakuzativem
            # genitiv
            '71' => ['other' => {'valency' => 'nom+gen'}],
            # instrumentál (včetně adjektiv)
            '72' => ['other' => {'valency' => 'nom+ins'}],
            # lokativ
            '73' => ['other' => {'valency' => 'nom+loc'}],
            # dativ
            '74' => ['other' => {'valency' => 'nom+dat'}],
            # genitiv a neakuzativ
            '75' => ['other' => {'valency' => 'nom+gen+nac'}],
            # instrumentál a neakuzativ
            '76' => ['other' => {'valency' => 'nom+ins+nac'}],
            # lokativ a neakuzativ
            '77' => ['other' => {'valency' => 'nom+loc+nac'}],
            # dativ a neakuzativ
            '78' => ['other' => {'valency' => 'nom+dat+nac'}],
            # nominativ (včetně adj. ap.)
            '79' => ['other' => {'valency' => 'nom+nom'}],
            # jiné pády (smíšená, trojmístná)
            '70' => ['other' => {'valency' => 'nom+othercase'}],
            # subjektová a nesubjektová jiná
            # adverbiále včetně předložkových frází
            '81' => ['other' => {'valency' => 'nom+adv'}],
            # infinitiv
            '82' => ['other' => {'valency' => 'nom+inf'}],
            # spojka
            '83' => ['other' => {'valency' => 'nom+con'}],
            # 2 adverbiále
            '84' => ['other' => {'valency' => 'nom+adv+adv'}],
            # adverbiále a neakuzativ
            '85' => ['other' => {'valency' => 'nom+adv+nac'}],
            # adverbiále a infinitiv
            '86' => ['other' => {'valency' => 'nom+adv+inf'}],
            # adverbiále a spojka
            '87' => ['other' => {'valency' => 'nom+adv+con'}],
            # infinitiv a neakuzativ
            '88' => ['other' => {'valency' => 'nom+inf+nac'}],
            # spojka a neakuzativ
            '89' => ['other' => {'valency' => 'nom+con+nac'}],
            # jiné i přímá řeč
            '80' => ['other' => {'valency' => 'nom+oth'}]
        }
    );
    $atoms{valencyF1} = $atoms{valency5};
    # ADVERB VALENCY ####################
    $atoms{valency6} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'adverb_valency',
        'decode_map' =>
        {
            # nespecifikovaná u slovesa: eště (a eště vydělali), napoprvý (nestřílím napoprvý), spolu (kdyby spolu mladí lidé déle žili)
            '-' => [],
            # kvantifikační nebo intenzifikační u slovesa: eště (Láďovi eště neni štyricet), absolutně (neplatí to absolutně)
            '1' => ['other' => {'valency' => 'vrb-qnt'}],
            # nekvantifikační s bezpředložkovým pádem jména: akorát (měli akorát dvě ženský), přesně (mám přesně tydlety zkušenosti)
            '2' => ['other' => {'valency' => 'npr-nqn'}],
            # kvantifikační s bezpředložkovým pádem jména: eště (eště vo víc dní), akorát (čuchala sem akorát olovo)
            '3' => ['other' => {'valency' => 'npr-qnt'}],
            # nekvantifikační u substantiv bez předložky: akorát (akorát párek sme dostali), přesně (neseženeš přesně ty lidi)
            # How the hell does this differ from 2?
            '4' => ['other' => {'valency' => 'npr-nq4'}],
            # s adjektivem nebo adverbiem: eště (dyť sou malinký eště), fyzicky (fyzicky těžké práce)
            '5' => ['other' => {'valency' => 'adj-adv'}],
            # s předložkou: zády (zády k ňákejm klukům), spolu (spolu s výchovou dětí)
            '6' => ['other' => {'valency' => 'pre'}],
            # se spojkou nebo synsém.: přesně (přesně cejtěj to, co ty), dozelena (takovej ten dozelena)
            '7' => ['other' => {'valency' => 'con'}],
            # s infinitivem: spolu (schopni spolu diskutovat), přesně (nemůžu přesně posoudit)
            '8' => ['other' => {'valency' => 'inf'}],
            # s větou: možná (možná, že tím, dyby se zvýšily...)
            '9' => ['other' => {'valency' => 'snt'}],
            # jiné (věta apod.): až (deset až patnáct tisíc ročně), možná (možná že bych se přikláněl)
            '0' => ['other' => {'valency' => 'oth'}]
        }
    );
    # CONJUNCTION VALENCY ####################
    $atoms{valency8} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'conjunction_valency',
        'decode_map' =>
        {
            # vůči slovu: na zadek a dolu; rodičům nebo mýmu okolí; v nepříliš zralém věku, ale z objektivních příčin
            '1' => ['other' => {'valency' => 'wrd'}],
            # vůči větě: sme se sešli a řikali sme mu; povinnosti sou tvoje, ale já je dělám; budu s vámi běhat nebo pudu do soutěže
            '2' => ['other' => {'valency' => 'snt'}],
            # nelze určit: a pak vždycky ne; něco jim teda sdělit nebo ...; autorita, ale ... asi mmm
            '9' => ['other' => {'valency' => 'unk'}]
        }
    );
    # PARTICLE VALENCY ####################
    $atoms{valency0} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'particle_valency',
        'decode_map' =>
        {
            # adpropoziční zač.: ... asi si ...; že taky nekoupí nic; spíš si myslim
            '1' => ['other' => {'valency' => 'pro-beg'}],
            # adpropoziční konc.: tak tam taky pudem, asi; to určitě přispělo k tomu taky; kolem sto čtyřiceti korun snad
            '2' => ['other' => {'valency' => 'pro-end'}],
            # adpropoziční jiná: to bych asi neměla; menčí taky kapacita plic; bojuje a snad částečně úspěšně
            '3' => ['other' => {'valency' => 'pro-oth'}],
            # adlexémová zač.: asi tisíc dvě stě let; taky nekoupí; spíš pes a Tonda
            '4' => ['other' => {'valency' => 'lex-beg'}],
            # adlexémová konc.: matika taky; několik asi; ňáká francouzská značka snad
            '5' => ['other' => {'valency' => 'lex-end'}],
            # adlexémová jiná: dneska je asi důvod jiný; která je taky tabuizovaná; nebo spíš, spíš hudby
            '6' => ['other' => {'valency' => 'lex-oth'}],
            # jiná nebo neurčeno: asi jak chválit za něco; co se týče jazyků, taky asi, pokud teda
            '7' => ['other' => {'valency' => 'oth'}]
        }
    );
    # VALENCY OF SUBSTANTIVE IDIOMS ####################
    $atoms{valencyF2} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'substantive_idiom_valency',
        'decode_map' =>
        {
            # bez valence: změny k lepšímu; zlatou svatbu; motor (hnací motor a stimul)
            '0' => [],
            # pád bez předložky (???): mít vliv; mít k sobě blíž; být doma (=nepracovat); mít děti; obejít se bez něčeho
            '1' => ['other' => {'valency' => 'npr'}],
            # s předložkou: vzít sebou; pochopení pro mě; pudou nahoru; udělat něco pro ty děti
            '2' => ['other' => {'valency' => 'pre'}],
            # se spojkou (???): vývojem vědy a techniky; samozřejmostí správců učeben a správců laboratoří
            '3' => ['other' => {'valency' => 'con'}],
            # s infinitivem: dát pozor (???); mít právo, aby (???)
            '4' => ['other' => {'valency' => 'inf'}],
            # s adverbiem: maj daleko; hodně dalších výskytů, ale jsou divné
            '5' => ['other' => {'valency' => 'adv'}],
            # bez předložky dva pády: má ráda Komárka; mám na mysli ten film; dám to trochu do pořádku
            '6' => ['other' => {'valency' => 'npr+npr'}],
            # pád a předložka: jí mám dát na zadek; ze kterejch by měl radost; to je na úkor té emancipace
            '7' => ['other' => {'valency' => 'npr+pre'}],
            # pád a spojka: nemáš, kdo by ti je držel; si říkaj za zády:; mohu říct, tak tohleto ten člověk vytvořil
            '8' => ['other' => {'valency' => 'npr+con'}],
            # jiné, 2 předložky nebo 3 pády: pro sebe a pro jiné tím pádem; tady u nich; a tak dále
            '9' => ['other' => {'valency' => 'oth'}]
        }
    );
    # VALENCY OF ADJECTIVE IDIOMS ####################
    $atoms{valencyF3} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'adjective_idiom_valency',
        'decode_map' =>
        {
            # bez valence v atributu: jako (vo ženu jako takovou); úrovni (na ňáký slušný úrovni); ten (pán ten a ten)
            '0' => ['other' => {'valency' => 'atr'}],
            # bez valence v predikátu: života (je vodtržená vod života); zpitá (byla zpitá na mol); nahňácaný (sedíme na sebe nahňácaný)
            '1' => ['other' => {'valency' => 'prd'}],
            # pád bez předložky v predikátu: žádný výskyt
            '2' => ['other' => {'valency' => 'prd-npr'}],
            # s předložkou v predikátu: žádný výskyt
            '3' => ['other' => {'valency' => 'prd-pre'}],
            # se spojkou: žádný výskyt
            '4' => ['other' => {'valency' => 'con'}],
            # s infinitivem: žádný výskyt
            '5' => ['other' => {'valency' => 'inf'}],
            # jiné: jako (vo systému jako takovym); pohled (taková roztomilá bytost na první pohled); takovej (strach jako takovej)
            '8' => ['other' => {'valency' => 'oth'}]
        }
    );
    # VALENCY OF ADVERBIAL IDIOMS ####################
    $atoms{valencyF4} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'adverb_idiom_valency',
        'decode_map' =>
        {
            # nespecifikovaná u slovesa: způsobem (kerý se ňákym způsobem rozlišujou); u (zrovna tak je to u mě)
            '-' => [],
            # kvantifikační nebo intenzifikační u slovesa: životě (asi jednou v životě); případě (v každém případě dokážou)
            '1' => ['other' => {'valency' => 'vrb-qnt'}],
            # nepředložkový pád, nekvantifikační: pohodě (my v krásný pohodě)
            '2' => ['other' => {'valency' => 'npr-nqn'}],
            # kvantifikační u jmen: cenu (shonu po penězích za každou cenu); většině (ve většině rodinách)
            '3' => ['other' => {'valency' => 'nou-qnt'}],
            # nekvantifikační u substantiv: u (to neni jenom u nás na podniku); podstatě (to je v podstatě prostředí školy)
            '4' => ['other' => {'valency' => 'nou-nqn'}],
            # s adjektivem nebo adverbiem: způsobem (ňákym způsobem úspěšná); tak (tak ňák hezký)
            '5' => ['other' => {'valency' => 'adj-adv'}],
            # s předložkou: u (mysliš u mě na pracovišti); podstatě (děti se vychovávaj v podstatě vod půl roku)
            '6' => ['other' => {'valency' => 'pre'}],
            # se spojkou / synsém.: podstatě (v podstatě nic, nó to by); tak (dycky jich tak ňák je tak ňák to,)
            '7' => ['other' => {'valency' => 'con'}],
            # s infinitivem: způsobem (nemaj ňákym způsobem možnost vybít); tak (tak a tak ta věc má vypadat)
            '8' => ['other' => {'valency' => 'inf'}],
            # s větou: u (u mě teda byl v tom, že); podstatě (ale v podstatě na to nejsem zvyklá)
            '9' => ['other' => {'valency' => 'snt'}],
            # jiné, věta aj.: tak (tý vteřiny, jo, nebo tak ňák, já vim); míře (nemyslim, že v takový míře, protože ty lidi)
            '0' => ['other' => {'valency' => 'oth'}]
        }
    );
    # VALENCY OF PROPOSITIONAL IDIOMS ####################
    $atoms{valencyF5} = $self->create_atom
    (
        'tagset' => 'cs::pmk',
        'surfeature' => 'propositional_idiom_valency',
        'decode_map' =>
        {
            # bez valence k propozici: nevim (já nevim ten plán); no (no a jedno ke druhému)
            '1' => [],
            # spojení s propozicí: je (jak u nás je známo, tak je to tak, že prostě)
            '2' => ['other' => {'valency' => 'pro'}]
        }
    );
    return \%atoms;
}



#------------------------------------------------------------------------------
# Decodes a physical tag (string) and returns the corresponding feature
# structure.
#------------------------------------------------------------------------------
sub decode
{
    my $self = shift;
    my $tag = shift;
    my $fs = Lingua::Interset::FeatureStructure->new();
    $fs->set_tagset('cs::pdt');
    my $atoms = $self->atoms();
    my @chars = split(//, $tag);
    $atoms->{pos}->decode_and_merge_hard($chars[0].$chars[1], $fs);
    $atoms->{gender}->decode_and_merge_hard($chars[2], $fs);
    $atoms->{number}->decode_and_merge_hard($chars[3], $fs);
    $atoms->{case}->decode_and_merge_hard($chars[4], $fs);
    $atoms->{possgender}->decode_and_merge_hard($chars[5], $fs);
    $atoms->{possnumber}->decode_and_merge_hard($chars[6], $fs);
    $atoms->{person}->decode_and_merge_hard($chars[7], $fs);
    $atoms->{tense}->decode_and_merge_hard($chars[8], $fs);
    $atoms->{degree}->decode_and_merge_hard($chars[9], $fs);
    $atoms->{negativeness}->decode_and_merge_hard($chars[10], $fs);
    $atoms->{voice}->decode_and_merge_hard($chars[11], $fs);
    $atoms->{variant}->decode_and_merge_hard($chars[14], $fs);
    return $fs;
}



#------------------------------------------------------------------------------
# Takes feature structure and returns the corresponding physical tag (string).
#------------------------------------------------------------------------------
sub encode
{
    my $self = shift;
    my $fs = shift; # Lingua::Interset::FeatureStructure
    my $tag = '';
    # pos and subpos
    # Numerals and pronouns must come first because they can be at the same time also nouns or adjectives.
    if($fs->is_numeral())
    {
    # Now encode the features.
    # The PDT tagset distinguishes unknown values ("X") and irrelevant features ("-").
    # Interset does not do this distinction but we have prepared the defaults for empty values above.
    my @tag = split(//, $tag);
    my @features = ('pos', 'subpos', 'gender', 'number', 'case', 'possgender', 'possnumber', 'person', 'tense', 'degree', 'negativeness', 'voice', undef, undef, 'variant');
    my $atoms = $self->atoms();
    for(my $i = 2; $i<15; $i++)
    {
        next if($i==12 || $i==13);
        my $atag = $atoms->{$features[$i]}->encode($fs);
        # If we got undef, there is something wrong with our encoding tables.
        if(!defined($atag))
        {
            print STDERR ("\n", $fs->as_string(), "\n");
            confess("Cannot encode '$features[$i]'");
        }
        if($atag ne '')
        {
            $tag[$i] = $atag;
        }
    }
    $tag = join('', @tag);
    return $tag;
}



#------------------------------------------------------------------------------
# Returns reference to list of known tags.
# The list was taken from the b2800a.o2f file (Hajič's Czech Morphology).
# 4288
#------------------------------------------------------------------------------
sub list
{
    my $self = shift;
    my $list = <<end_of_list
A.-------------
A2--------A----
Vt-S---3P-NA--2
X\@-------------
X\@------------0
X\@------------1
Xx-------------
XX-------------
XX------------8
Z:-------------
Z#-------------
end_of_list
    ;
    # Protect from editors that replace tabs by spaces.
    $list =~ s/ \s+/\t/sg;
    my @list = split(/\r?\n/, $list);
    pop(@list) if($list[$#list] eq "");
    return \@list;
}



1;

=head1 SYNOPSIS

  use Lingua::Interset::Tagset::CS::Pdt;
  my $driver = Lingua::Interset::Tagset::CS::Pdt->new();
  my $fs = $driver->decode('NNMS1-----A----');

or

  use Lingua::Interset qw(decode);
  my $fs = decode('cs::pdt', 'NNMS1-----A----');

=head1 DESCRIPTION

Interset driver for the part-of-speech tagset of the Prague Dependency Treebank.

=head1 SEE ALSO

L<Lingua::Interset>,
L<Lingua::Interset::Tagset>,
L<Lingua::Interset::FeatureStructure>

=cut
