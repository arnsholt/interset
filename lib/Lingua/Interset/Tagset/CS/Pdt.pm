# ABSTRACT: Driver for the tagset of the Prague Dependency Treebank.
# Copyright © 2006-2009, 2014 Dan Zeman <zeman@ufal.mff.cuni.cz>

package Lingua::Interset::Tagset::CS::Pdt;
use strict;
use warnings;
# VERSION: generated by DZP::OurPkgVersion

use utf8;
use open ':utf8';
use namespace::autoclean;
use Moose;
use Lingua::Interset::FeatureStructure;
use Lingua::Interset::Trie;
extends 'Lingua::Interset::Tagset';



my %postable =
(
    # noun
    # examples: pán hrad žena růže město moře
    'NN' => ['pos' => 'noun'],
    # noun abbreviation
    'N;' => ['pos' => 'noun', 'abbr' => 'abbr'],
    # adjective
    # examples: mladý jarní
    'AA' => ['pos' => 'adj'],
    # short form of adjective ("jmenný tvar")
    # examples: mlád stár zdráv
    'AC' => ['pos' => 'adj', 'variant' => 'short'],
    # special adjectives: svůj, nesvůj, tentam
    # svůj: other usage than possessive reflexive pronoun
    'AO' => ['pos' => 'adj', 'other' => 'O'],
    # possessive adjective
    # examples: otcův matčin
    'AU' => ['pos' => 'adj', 'poss' => 'poss'],
    # adjective derived from present transgressive of verb
    # examples: dělající
    'AG' => ['pos' => 'adj', 'verbform' => 'part', 'tense' => 'pres', 'voice' => 'act', 'aspect' => 'imp'],
    # adjective derived from past transgressive of verb
    # examples: udělavší
    'AM' => ['pos' => 'adj', 'verbform' => 'part', 'tense' => 'past', 'voice' => 'act', 'aspect' => 'perf'],
    # first part of hyphenated compound adjective
    # example: česko (in "česko-slovenský")
    'A2' => ['pos' => 'adj', 'hyph' => 'hyph'],
    # adjective abbreviation
    # example: ml.
    'A.' => ['pos' => 'adj', 'abbr' => 'abbr'],
    # personal pronoun
    # examples: já ty tys on ona ono my vy oni ony ona
    'PP' => ['pos' => 'noun', 'prontype' => 'prs'],
    # personal pronoun, short inflected variant
    # examples: mě mi ti mu
    'PH' => ['pos' => 'noun', 'prontype' => 'prs', 'variant' => 'short'],
    # personal pronoun, inflected, special variant after preposition
    # examples: něj němu něho ním ní ni nich nim ně nimi
    'P5' => ['pos' => 'noun', 'prontype' => 'prs', 'prepcase' => 'pre'],
    # compound preposition + personal pronoun
    # examples: naň ("na něj")
    'P0' => ['pos' => 'noun', 'prontype' => 'prs', 'adpostype' => 'preppron'],
    # reflexive personal pronoun, long form
    # examples: sebe sobě sebou
    'P6' => ['pos' => 'noun', 'prontype' => 'prs', 'reflex' => 'reflex'],
    # reflexive personal pronoun, short form
    # examples: se si ses sis
    'P7' => ['pos' => 'noun', 'prontype' => 'prs', 'reflex' => 'reflex', 'variant' => 'short'],
    # possessive pronoun
    # examples: můj tvůj jeho její náš váš jejich
    'PS' => ['pos' => 'adj', 'prontype' => 'prs', 'poss' => 'poss'],
    # reflexive possessive pronoun
    # examples: svůj
    'P8' => ['pos' => 'adj', 'prontype' => 'prs', 'poss' => 'poss', 'reflex' => 'reflex'],
    # demonstrative pronoun
    # examples: ten tento tenhle onen takový týž tentýž sám
    ###!!! Syntactically they are often adjectives but not always ("to auto je moje" vs. "to je moje").
    'PD' => ['pos' => 'adj', 'prontype' => 'dem', 'definiteness' => 'def'],
    # interrogative or relative pronoun, animate
    # examples: kdo kdož kdos
    'PK' => ['pos' => 'noun', 'prontype' => 'int|rel', 'animateness' => 'anim'],
    # interrogative or relative pronoun, inanimate
    # examples: co copak cožpak
    'PQ' => ['pos' => 'noun', 'prontype' => 'int|rel', 'animateness' => 'inan'],
    # interrogative or relative compound of preposition and pronoun
    # examples: oč nač zač
    'PY' => ['pos' => 'noun', 'prontype' => 'int|rel', 'adpostype' => 'preppron'],
    # interrogative or relative pronoun, attributive
    # examples: jaký který čí
    'P4' => ['pos' => 'adj', 'prontype' => 'int|rel'],
    # relative pronoun
    # examples: jenž jež již
    'PJ' => ['pos' => 'noun', 'prontype' => 'rel', 'prepcase' => 'npr'],
    # relative pronoun, special variant after preposition
    # examples: něhož němuž nějž němž nímž
    'P9' => ['pos' => 'noun', 'prontype' => 'rel', 'prepcase' => 'pre'],
    # relative pronoun referring to clause
    # example: což
    'PE' => ['pos' => 'noun', 'prontype' => 'rel'],
    # possessive relative pronoun
    # examples: jehož jejíž
    'P1' => ['pos' => 'adj', 'prontype' => 'rel', 'poss' => 'poss'],
    # indefinite pronoun
    # examples: někdo něco nějaký některý něčí ... kdokoli ... kdosi ...
    'PZ' => ['pos' => 'noun|adj', 'prontype' => 'ind', 'definiteness' => 'ind'],
    # totality pronoun
    # examples: všechen sám
    'PL' => ['pos' => 'noun', 'prontype' => 'tot', 'definiteness' => 'ind'],
    # negative pronoun
    # examples: nikdo nic nijaký ničí žádný
    'PW' => ['pos' => 'noun|adj', 'prontype' => 'neg', 'negativeness' => 'neg'],
    # cardinal number expressed by digits
    # examples: 1 3,14 2014
    'C=' => ['pos' => 'num', 'numtype' => 'card', 'numform' => 'digit'],
    # cardinal number expressed by Roman numerals
    # examples: MCMLXXI
    # { ... syntax highlighting
    'C}' => ['pos' => 'num', 'numtype' => 'card', 'numform' => 'roman'],
    # cardinal numeral, low value (agrees with counted noun)
    # examples: jeden dva tři čtyři
    'Cl' => ['pos' => 'num', 'numtype' => 'card', 'numform' => 'word', 'numvalue' => '1|2|3'],
    # cardinal numeral, high value (in nominative, accusative and vocative behaves like a noun and the counted noun must be in genitive)
    # examples: pět šest sedm sto
    'Cn' => ['pos' => 'num', 'numtype' => 'card', 'numform' => 'word'],
    # interrogative or relative cardinal numeral
    # example: kolik
    'C?' => ['pos' => 'num', 'numtype' => 'card', 'prontype' => 'int|rel'],
    # indefinite cardinal numeral (###!!! or demonstrative!)
    # examples: několik mnoho málo kdovíkolik tolik
    'Ca' => ['pos' => 'num', 'numtype' => 'card', 'prontype' => 'ind'],
    # cardinal numeral, fraction denominator
    # examples: polovina třetina čtvrtina setina tisícina
    'Cy' => ['pos' => 'num', 'numtype' => 'frac'],
    # generic cardinal numeral
    # examples: čtvero patero desatero
    'Cj' => ['pos' => 'num', 'numtype' => 'gen'],
    # generic adjectival numeral (number of sets of things)
    # examples: čtvery patery desatery
    'Ck' => ['pos' => 'num', 'numtype' => 'gen', 'other' => 'k'],
    # ordinal numeral
    # examples: první druhý třetí stý tisící
    ###!!! a co "poprvé", to není řadová číslovka?
    'Cr' => ['pos' => 'adj', 'numtype' => 'ord'],
    # interrogative or relative ordinal numeral
    # examples: kolikátý
    'Cz' => ['pos' => 'adj', 'numtype' => 'ord', 'prontype' => 'int|rel'],
    # generic numeral "twofold"
    # examples: jedny dvojí desaterý
    'Cd' => ['pos' => 'adj', 'numtype' => 'gen'],
    # generic numeral
    # examples: jedny nejedny
    'Ch' => ['pos' => 'adj', 'numtype' => 'gen', 'other' => 'h'],
    # indefinite ordinal numeral
    # examples: nejeden tolikátý
    'Cw' => ['pos' => 'adj', 'numtype' => 'ord', 'prontype' => 'ind'],
    # multiplicative numeral
    # examples: jedenkrát dvakrát třikrát stokrát tisíckrát
    'Cv' => ['pos' => 'adv', 'numtype' => 'mult'],
    # interrogative or relative multiplicative numeral
    # examples: kolikrát
    'Cu' => ['pos' => 'adv', 'numtype' => 'mult', 'prontype' => 'int|rel'],
    # indefinite multiplicative numeral
    # examples: několikrát mnohokrát tolikrát
    'Co' => ['pos' => 'adv', 'numtype' => 'mult', 'prontype' => 'ind'],
    # numeral abbreviation
    # examples: tis. mil.
    'C3' => ['pos' => 'num', 'abbr' => 'abbr'],
    # verb infinitive
    # examples: nést dělat říci
    'Vf' => ['pos' => 'verb', 'verbform' => 'inf'],
    # finite verb, present or future indicative
    # examples: nesu beru mažu půjdu
    'VB' => ['pos' => 'verb', 'verbform' => 'fin', 'mood' => 'ind', 'tense' => 'pres'], # tense may be later overwritten by 'fut'
    # finite verb, present or future indicative with encliticized 'neboť'
    # examples: dělámť děláť
    'Vt' => ['pos' => 'verb', 'verbform' => 'fin', 'mood' => 'ind', 'tense' => 'pres', 'voice' => 'act', 'verbtype' => 'verbconj'],
    # verb imperative
    # examples: nes dělej řekni
    'Vi' => ['pos' => 'verb', 'verbform' => 'fin', 'mood' => 'imp'],
    # conditional auxiliary verb form (evolved from aorist of 'to be')
    # examples: bych bys by bychom byste
    'Vc' => ['pos' => 'verb', 'verbform' => 'fin', 'mood' => 'sub'], ###!!! jaktože ne cond???
    # verb active participle
    # examples: dělal dělala dělalo dělali dělaly dělals dělalas ...
    'Vp' => ['pos' => 'verb', 'verbform' => 'part', 'tense' => 'past', 'voice' => 'act'],
    # verb active participle with encliticized 'neboť'
    # examples: dělalť dělalať dělaloť ...
    'Vq' => ['pos' => 'verb', 'verbform' => 'part', 'tense' => 'past', 'voice' => 'act', 'verbtype' => 'verbconj'],
    # verb passive participle
    # examples: dělán dělána děláno děláni dělány udělán udělána
    'Vs' => ['pos' => 'verb', 'verbform' => 'part', 'voice' => 'pass'],
    # verb present transgressive
    # examples: nesa nesouc nesouce dělaje dělajíc dělajíce
    'Ve' => ['pos' => 'verb', 'verbform' => 'trans', 'tense' => 'pres', 'aspect' => 'imp', 'voice' => 'act'],
    # verb past transgressive
    # examples: udělav udělavši udělavše přišed přišedši přišedše
    'Vm' => ['pos' => 'verb', 'verbform' => 'trans', 'tense' => 'past', 'aspect' => 'perf', 'voice' => 'act'],
    # verb abbreviation
    # examples: srov.
    'V~' => ['pos' => 'verb', 'abbr' => 'abbr'],
    # adverb with degree of comparison and negativeness
    # examples: málo chytře
    'Dg' => ['pos' => 'adv'],
    # adverb without degree of comparison and negativeness
    # examples: kde kam kdy jak tady dnes
    'Db' => ['pos' => 'adv'],
    # adverb abbreviation
    'D!' => ['pos' => 'adv', 'abbr' => 'abbr'],
    # preposition
    # examples: v pod k
    'RR' => ['pos' => 'adp', 'adpostype' => 'prep'],
    # vocalized preposition
    # examples: ve pode ke ku
    'RV' => ['pos' => 'adp', 'adpostype' => 'voc'],
    # first part of compound preposition
    # examples: nehledě na, vzhledem k
    'RF' => ['pos' => 'adp', 'adpostype' => 'comprep'],
    # coordinating conjunction
    # examples: a i ani nebo ale avšak
    'J^' => ['pos' => 'conj', 'conjtype' => 'coor'],
    # subordinating conjunction
    # examples: že, aby, zda, protože, přestože
    'J,' => ['pos' => 'conj', 'conjtype' => 'sub'],
    # mathematical conjunction (the word 'times' in 'five times')
    # examples: krát
    ###!!! create a new feature value???
    'J*' => ['pos' => 'conj', 'conjtype' => 'coor', 'other' => '*'],
    # particle
    # examples: ať kéž nechť
    'TT' => ['pos' => 'part'],
    # interjection
    # examples: haf bum bác
    'II' => ['pos' => 'int'],
    # punctuation
    # examples: . ? ! , ; : -
    'Z:' => ['pos' => 'punc'],
    # artificial root node of the sentence
    # examples: #
    "Z\#" => ['pos' => 'punc', 'punctype' => 'root'],
    # X: unknown part of speech
    # unrecognized word form
    'X@' => ['other' => '@'],
    # word form recognized but tag is missing in dictionary
    'XX' => ['other' => 'X'],
    # - should never appear as subpos but it does, even in the list in b2800a.o2f
    'X-' => ['other' => '-'],
    # abbreviation of unknown part of speech
    'Xx' => ['abbr' => 'abbr']
);



#------------------------------------------------------------------------------
# Creates an atomic driver for gender and returns it.
#------------------------------------------------------------------------------
sub _create_atom_gender
{
    use Lingua::Interset::Atom;
    my $atom = Lingua::Interset::Atom->new
    (
        'surfeature' => 'gender',
        'decode_map' =>
        {
            'M' => ['gender' => 'masc', 'animateness' => 'anim'],
            'I' => ['gender' => 'masc', 'animateness' => 'inan'],
            'F' => ['gender' => 'fem'],
            'N' => ['gender' => 'neut'],
            'Y' => ['gender' => 'masc'],
            'T' => ['gender' => 'masc|fem', 'animateness' => 'inan|'],
            'W' => ['gender' => 'masc|neut', 'animateness' => 'inan|'],
            'H' => ['gender' => 'fem|neut'],
            'Q' => ['gender' => 'fem|neut'],
            'Z' => ['gender' => 'masc|neut'],
            'X' => []
        },
        'encode_map' =>

            { 'gender' => { 'masc' => { 'animateness' => { 'inan' => 'I',
                                                           '@'    => 'M' }},
                            'fem'  => 'F',
                            '@'    => 'N' }} ###!!! Tohle není celé! Ale musíme nejdřív vyřešit práci s poli v encode mapách!
    );
    return $atom;
}



sub _create_atom_number
{
    use Lingua::Interset::Atom;
    my $atom = Lingua::Interset::Atom->new
    (
        'surfeature' => 'number',
        'decode_map' =>
        {
            'S' => ['number' => 'sing'],
            'D' => ['number' => 'dual'],
            'P' => ['number' => 'plu'],
            'W' => ['number' => 'sing|plu'],
            'X' => []
        },
        'encode_map' =>

            { 'number' => { 'dual' => 'D',
                            'plu'  => 'P',
                            '@'    => 'S' }} ###!!! Tohle není celé! Ale musíme nejdřív vyřešit práci s poli v encode mapách!
    );
    return $atom;
}



sub _create_atom_case
{
    use Lingua::Interset::SimpleAtom;
    my $atom = Lingua::Interset::SimpleAtom->new
    (
        'surfeature' => 'case',
        'intfeature' => 'case',
        'simple_decode_map' =>
        {
            '1' => 'nom',
            '2' => 'gen',
            '3' => 'dat',
            '4' => 'acc',
            '5' => 'voc',
            '6' => 'loc',
            '7' => 'ins',
            'X' => ''
        }
    );
    return $atom;
}



#------------------------------------------------------------------------------
# Decodes a physical tag (string) and returns the corresponding feature
# structure.
#------------------------------------------------------------------------------
sub decode
{
    my $self = shift;
    my $tag = shift;
    my $fs = Lingua::Interset::FeatureStructure->new();
    $fs->set_tagset('en::penn');
    my $assignments = $postable{$tag};
    if($assignments)
    {
        $fs->multiset(@{$assignments});
    }
    return $fs;
}



#------------------------------------------------------------------------------
# Takes feature structure and returns the corresponding physical tag (string).
#------------------------------------------------------------------------------
sub encode
{
    my $self = shift;
    my $fs = shift; # Lingua::Interset::FeatureStructure
    my $tag = '';
    my $pos = $fs->pos();
    my $prontype = $fs->prontype();
    # Foreign words without respect to part of speech.
    if($fs->foreign())
    {
        $tag = 'FW';
    }
    # Separated affixes.
    elsif($fs->hyph())
    {
        $tag = 'AFX';
    }
    # Pronouns, determiners and pronominal adverbs.
    elsif($prontype =~ m/^(rel|int)$/)
    {
        # WDT WP WP$ WRB
        if($pos eq 'adv')
        {
            $tag = 'WRB';
        }
        elsif($fs->poss())
        {
            $tag = 'WP$';
        }
        elsif($pos eq 'adj')
        {
            $tag = 'WDT';
        }
        else
        {
            $tag = 'WP';
        }
    }
    elsif($prontype ne '')
    {
        # PRP PRP$
        if($fs->poss())
        {
            $tag = 'PRP$';
        }
        else
        {
            $tag = 'PRP';
        }
    }
    elsif($pos eq 'noun')
    {
        # NN NNS NNP NNPS
        if($fs->nountype() eq 'prop')
        {
            if($fs->number() eq 'plu')
            {
                $tag = 'NNPS';
            }
            else
            {
                $tag = 'NNP';
            }
        }
        else
        {
            if($fs->number() eq 'plu')
            {
                $tag = 'NNS';
            }
            else
            {
                $tag = 'NN';
            }
        }
    }
    elsif($pos eq 'adj')
    {
        # DT PDT JJ JJR JJS
        if($pos eq 'adj')
        {
            if($fs->adjtype() eq 'det')
            {
                $tag = 'DT';
            }
            elsif($fs->adjtype() eq 'pdt')
            {
                $tag = 'PDT';
            }
            elsif($fs->degree() eq 'sup')
            {
                $tag = 'JJS';
            }
            elsif($fs->degree() eq 'comp')
            {
                $tag = 'JJR';
            }
            else
            {
                $tag = 'JJ';
            }
        }
    }
    elsif($pos eq 'num')
    {
        # CD; ordinal numbers are adjectives JJ
        if($fs->numtype() eq 'card')
        {
            $tag = 'CD';
        }
        else
        {
            ###!!! multiplicative and some ordinal numerals behave more like adverbs; see the synpos?
            $tag = 'JJ';
        }
    }
    elsif($pos eq 'verb')
    {
        # MD VB VBD VBG VBN VBP VBZ
        if($fs->verbtype() eq 'mod')
        {
            $tag = 'MD';
        }
        elsif($fs->verbform() eq 'part')
        {
            if($fs->tense() eq 'pres' || $fs->aspect() =~ m/^(imp|pro)$/)
            {
                $tag = 'VBG';
            }
            else
            {
                $tag = 'VBN';
            }
        }
        elsif($fs->tense() eq 'past')
        {
            $tag = 'VBD';
        }
        elsif($fs->tense() eq 'pres' && $fs->number() eq 'sing')
        {
            if($fs->person() == 3)
            {
                $tag = 'VBZ';
            }
            else
            {
                $tag = 'VBP';
            }
        }
        else
        {
            $tag = 'VB';
        }
    }
    elsif($pos eq 'adv')
    {
        # EX RB RBR RBS
        if($fs->advtype() eq 'ex')
        {
            $tag = 'EX';
        }
        elsif($fs->degree() eq 'sup')
        {
            $tag = 'RBS';
        }
        elsif($fs->degree() eq 'comp')
        {
            $tag = 'RBR';
        }
        else
        {
            $tag = 'RB';
        }
    }
    elsif($pos eq 'adp')
    {
        # IN (TO)
        $tag = 'IN';
    }
    elsif($pos eq 'conj')
    {
        # CC (IN)
        if($fs->conjtype() eq 'sub')
        {
            $tag = 'IN';
        }
        else
        {
            $tag = 'CC';
        }
    }
    elsif($pos eq 'part')
    {
        # RP TO POS
        if($fs->poss())
        {
            $tag = 'POS';
        }
        elsif($fs->verbform() eq 'inf' || $fs->parttype() eq 'inf')
        {
            $tag = 'TO';
        }
        else
        {
            $tag = 'RP';
        }
    }
    elsif($pos eq 'int')
    {
        $tag = 'UH';
    }
    elsif($fs->tagset() eq 'en::penn' && $fs->other() eq 'currency')
    {
        $tag = '$';
    }
    elsif($pos eq 'punc')
    {
        # LS # . , -LRB- -RRB- `` '' HYPH SYM :
        if($fs->numtype() eq 'ord')
        {
            $tag = 'LS';
        }
        elsif($fs->tagset() eq 'en::penn' && $fs->other() eq "\#")
        {
            $tag = "\#";
        }
        elsif($fs->punctype() =~ m/^(peri|qest|excl)$/)
        {
            $tag = '.';
        }
        elsif($fs->punctype() eq 'comm')
        {
            $tag = ',';
        }
        elsif($fs->punctype() eq 'brck')
        {
            if($fs->puncside() eq 'fin')
            {
                $tag = '-RRB-';
            }
            else
            {
                $tag = '-LRB-';
            }
        }
        elsif($fs->punctype() eq 'quot')
        {
            if($fs->puncside() eq 'fin')
            {
                $tag = "''";
            }
            else
            {
                $tag = "``";
            }
        }
        elsif($fs->punctype() eq 'dash')
        {
            # This tag is new in PennBioIE. In older data hyphens are tagged ":".
            $tag = 'HYPH';
        }
        elsif($fs->punctype() eq 'symb')
        {
            $tag = 'SYM';
        }
        else
        {
            $tag = ':';
        }
    }
    # unknown elements (also punctuation in some corpora)
    else
    {
        $tag = 'NIL';
    }
    return $tag;
}



#------------------------------------------------------------------------------
# Returns reference to list of known tags.
# 25.3.2009: added new tags HYPH, AFX from PennBioIE, 2005 (HYPH appears in the CoNLL 2009 data)
#
# cd /net/data/LDC/PennTreebank3/parsed/mrg/wsj
# foreach i (00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)
#   cat $i/*.mrg >> /tmp/all.mrg
# end
# cat /tmp/all.mrg | perl -pe 's/\(([-\w]+)\s+[^\(\)]+\)/ $1 /g; s/\([-\w\*]+//g; s/[\(\)]/ /g; s/^\s+//; s/\s+$/\n/; s/\s+/\n/g;' | sort -u | wc -l
# rm /tmp/all.mrg
# 43
#------------------------------------------------------------------------------
sub list
{
    my $self = shift;
    my @list = sort(keys(%postable));
    return \@list;
}



1;

=head1 SYNOPSIS

  use Lingua::Interset::Tagset::EN::Penn;
  my $driver = Lingua::Interset::Tagset::EN::Penn->new();
  my $fs = $driver->decode('NN');

or

  use Lingua::Interset qw(decode);
  my $fs = decode('en::penn', 'NN');

=head1 DESCRIPTION

Interset driver for the part-of-speech tagset of the Penn Treebank.

=head1 SEE ALSO

L<Lingua::Interset>
L<Lingua::Interset::Tagset>,
L<Lingua::Interset::FeatureStructure>

=cut
